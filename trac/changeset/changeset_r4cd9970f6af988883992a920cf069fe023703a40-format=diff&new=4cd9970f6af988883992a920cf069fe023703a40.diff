Index: system/application/helpers/crosswords_helper.php
===================================================================
--- system/application/helpers/crosswords_helper.php (revision e3294a48350a469d5bfd7b04dda19f4f11942dad)
+++ system/application/helpers/crosswords_helper.php (revision 4cd9970f6af988883992a920cf069fe023703a40)
@@ -1095,5 +1095,5 @@
 
 		if ($this->office) {
-			foreach ($this->tips as &$tip) {
+			foreach ($this->tips as $index => &$tip) {
 				$form = new InputInterfaces;
 				$tip['edit_form'] = &$form;
@@ -1117,5 +1117,41 @@
 				$form->Add('Content (wikitext)', $inputs['content']);
 
-				$errors = $form->Validate();
+				if ($inputs['delete']->Value()) {
+					$success = $ci->crosswords_model->DeleteTipById($tip['id']);
+					if ($success) {
+						unset($this->tips[$index]);
+						$ci->messages->AddMessage('success', 'Tip deleted');
+					}
+					else {
+						$ci->messages->AddMessage('error', 'Tip could not be deleted');
+					}
+				}
+				else {
+					$num_errors = $form->Validate();
+					if (0 == $num_errors && $form->Changed()) {
+						$changes = $form->ChangedValues();
+						$values = array();
+						if (isset($changes[$name.'category'])) {
+							$values['category_id'] = $changes[$name.'category'];
+						}
+						if (isset($changes[$name.'content'])) {
+							$values['content_wikitext'] = $changes[$name.'content'];
+							$values['content_xhtml'] = $inputs['content']->ValueXhtml();
+						}
+						$values['id'] = $tip['id'];
+						if (!$ci->crosswords_model->UpdateTip($values)) {
+							$ci->messages->AddMessage('error', 'Tip could not be saved');
+						}
+						else {
+							$ci->messages->AddMessage('success', 'Tip saved successfully');
+							foreach ($values as $id => $value) {
+								$tip[$id] = $value;
+							}
+							if (isset($values['category_id'])) {
+								$tip['category_name'] = $category_options[$values['category_id']];
+							}
+						}
+					}
+				}
 
 				unset($form);
Index: system/application/models/crosswords_model.php
===================================================================
--- system/application/models/crosswords_model.php (revision e4f1bf6a2739f084bc8a3f3ad54c46bdb98ccb8a)
+++ system/application/models/crosswords_model.php (revision 4cd9970f6af988883992a920cf069fe023703a40)
@@ -163,4 +163,6 @@
 	 * @param $category_id int,null category id.
 	 * @param $crossword_id int,null crossword id.
+	 * @param $tip_id int,null tip id.
+	 * @param $published bool,null attached crossword published.
 	 * @return array[array('id'=>,'category_id'=>,'crossword_id'=>,'content_wikitext'=>,'content_xml'=>,'published'=>,'publication'=>)]
 	 */
@@ -206,4 +208,88 @@
 		$results = $this->db->query($sql, $bind)->result_array();
 		return $results;
+	}
+
+	/** Update a tip
+	 * @param $values array('id'=>)
+	 * @return true if affected_rows != 0
+	 */
+	function UpdateTip(&$values)
+	{
+		if (!isset($values['id'])) {
+			return false;
+		}
+		$setters = array();
+		$bind = array();
+		if (isset($values['category_id'])) {
+			$setters[] = '`crossword_tip_category_id`=?';
+			$bind[] = $values['category_id'];
+		}
+		if (isset($values['crossword_id'])) {
+			$setters[] = '`crossword_tip_crossword_id`=?';
+			$bind[] = $values['crossword_id'];
+		}
+		if (isset($values['content_wikitext'])) {
+			if (!isset($values['content_xhtml'])) {
+				$this->load->library('Wikiparser');
+				$parser = new Wikiparser();
+				$values['content_xhtml'] = $parser->parse($values['content_wikitext']);
+			}
+			$setters[] = '`crossword_tip_content_wikitext`=?';
+			$bind[] = $values['content_wikitext'];
+			$setters[] = '`crossword_tip_content_xml`=?';
+			$bind[] = $values['content_xhtml'];
+		}
+		if (empty($setters)) {
+			return false;
+		}
+		$sql =	'UPDATE `crossword_tips` '.
+				'SET	'.join(',',$setters).' '.
+				'WHERE	`crossword_tip_id`=?';
+		$bind[] = $values['id'];
+		$this->db->query($sql, $bind);
+		return ($this->db->affected_rows() > 0);
+	}
+
+	/// Small wrapper around DeleteTips.
+	function DeleteTipById($tip_id)
+	{
+		if (null === $tip_id) {
+			return false;
+		}
+		return ($this->DeleteTips(null, null, $tip_id) > 0);
+	}
+
+	/// Delete tips matching certain criteria.
+	/**
+	 * @param $category_id int,null category id.
+	 * @param $crossword_id int,null crossword id.
+	 * @param $tip_id int,null tip id.
+	 * @return int Affected rows
+	 */
+	function DeleteTips($category_id = null, $crossword_id = null, $tip_id = null)
+	{
+		// Construct query
+		$sql =	'DELETE '.
+				'FROM		`crossword_tips` ';
+		$conditions = array();
+		$bind = array();
+		if (null !== $category_id) {
+			$conditions[] = '`crossword_tip_category_id`=?';
+			$bind[] = $category_id;
+		}
+		if (null !== $crossword_id) {
+			$conditions[] = '`crossword_tip_crossword_id`=?';
+			$bind[] = $crossword_id;
+		}
+		if (null !== $tip_id) {
+			$conditions[] = '`crossword_tip_id`=?';
+			$bind[] = $tip_id;
+		}
+		if (!empty($conditions)) {
+			$sql .= 'WHERE '.join(' AND ', $conditions).' ';
+		}
+		// Execute query
+		$this->db->query($sql, $bind);
+		return $this->db->affected_rows();
 	}
 
