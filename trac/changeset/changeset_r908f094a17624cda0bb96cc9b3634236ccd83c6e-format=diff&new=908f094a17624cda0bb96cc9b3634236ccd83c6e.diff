Index: public_html/javascript/crossword.js
===================================================================
--- public_html/javascript/crossword.js (revision 908f094a17624cda0bb96cc9b3634236ccd83c6e)
+++ public_html/javascript/crossword.js (revision 908f094a17624cda0bb96cc9b3634236ccd83c6e)
@@ -0,0 +1,447 @@
+/*
+ * Author: James Hogan
+ * Copyright (c) 2008 The Yorker
+ */
+
+/*
+ * features
+ *  show cross word
+ *  can type letters into boxes
+ *  arrow navigation
+ *  typing changes focus to next box
+ *  clues select and clickable
+ *  can submit completed crossword (with name/email?)
+ *  if its an old crossword, can check/reveal a word/enture puzzle
+ *  timer (just for curiosity, not sent with score)
+ */
+
+/// Add style c1 to o
+function CssAdd(o,c1)
+{
+	if(!CssCheck(o,c1)) {
+		o.className+=o.className?' '+c1:c1;
+	}
+}
+/// Remove style c1 from o
+function CssRemove(o,c1)
+{
+	var rep=o.className.match(' '+c1)?' '+c1:c1;
+	o.className=o.className.replace(rep,'');
+}
+/// Check if style c1 is in o
+function CssCheck(o,c1)
+{
+	return new RegExp('\\b'+c1+'\\b').test(o.className);
+}
+
+function Orientation(orientation)
+{
+	this.m_orientation = orientation;
+
+	this.isHorizontal = function()
+	{
+		return this.m_orientation == 0;
+	}
+	this.isVertical = function()
+	{
+		return this.m_orientation == 1;
+	}
+	this.toggle = function()
+	{
+		this.m_orientation = 1-this.m_orientation;
+	}
+	this.dx = function()
+	{
+		return this.isHorizontal() ? 1 : 0;
+	}
+	this.dy = function()
+	{
+		return this.isVertical() ? 1 : 0;
+	}
+}
+
+function newHorizontal()
+{
+	return new Orientation(0);
+}
+
+function newVertical()
+{
+	return new Orientation(1);
+}
+
+// Data for each crossword (by name)
+var crosswords = {};
+
+function crossword(name)
+{
+	return crosswords[name];
+}
+
+function Crossword(name, width, height)
+{
+	crosswords[name] = this;
+
+	this.m_name = name;
+	this.m_width = width;
+	this.m_height = height;
+
+	this.m_x = -1;
+	this.m_y = -1;
+	this.m_orientation = newHorizontal();
+	this.m_xyModified = false;
+
+	this.width = function()
+	{
+		return this.m_width;
+	}
+	this.height = function()
+	{
+		return this.m_height;
+	}
+
+	this.x = function()
+	{
+		return this.m_x;
+	}
+	this.y = function()
+	{
+		return this.m_y;
+	}
+	this.orientation = function()
+	{
+		return this.m_orientation;
+	}
+
+	this.editBox = function(x, y)
+	{
+		return document.getElementById(this.m_name+"-edit-"+x+"-"+y);
+	}
+
+	this.clue = function(x, y, o)
+	{
+		return document.getElementById(this.m_name+"-clue-"+x+"-"+y+"-"+(o.isVertical()?1:0));
+	}
+
+	this.clueOf = function(x, y, o)
+	{
+		var dx = o.dx();
+		var dy = o.dy();
+		while (true) {
+			x -= dx;
+			y -= dy;
+			if (null == this.cell(x, y)) {
+				x += dx;
+				y += dy;
+				break;
+			}
+		}
+		return this.clue(x, y, o);
+	}
+
+	this.cell = function(x, y)
+	{
+		return document.getElementById(this.m_name+"-"+x+"-"+y);
+	}
+
+	// Get a list of cells in a slot, the first being the one specified
+	this.slot = function(x, y, orientation, editBox)
+	{
+		var result = []
+		var cell = (editBox ? this.editBox(x, y) : this.cell(x, y));
+		if (null != cell) {
+			result.push(cell);
+			// First go backwards
+			var cx = x;
+			var cy = y;
+			var dx = orientation.dx();
+			var dy = orientation.dy();
+			while (true) {
+				cx -= dx;
+				cy -= dy;
+				cell = (editBox ? this.editBox(cx, cy) : this.cell(cx, cy));
+				if (null != cell) {
+					result.push(cell);
+				}
+				else {
+					break;
+				}
+			};
+			// Now go forwards
+			cx = x;
+			cy = y;
+			while (true) {
+				cx += dx;
+				cy += dy;
+				cell = (editBox ? this.editBox(cx, cy) : this.cell(cx, cy));
+				if (null != cell) {
+					result.push(cell);
+				}
+				else {
+					break;
+				}
+			}
+		}
+		return result;
+	}
+
+	this.setClueComplete = function(x, y, o, completed)
+	{
+		var clue = this.clueOf(x, y, o);
+		if (null != clue) {
+			if (completed) {
+				CssAdd(clue, "complete");
+			}
+			else {
+				CssRemove(clue, "complete");
+			}
+		}
+	}
+
+	this.isClueComplete = function(x, y, o)
+	{
+		var boxes = this.slot(x, y, o, this.value, true);
+		for (var i = 0; i < boxes.length; ++i) {
+			if (boxes[i].value == "") {
+				return false;
+			}
+		}
+		return true;
+	}
+
+	this.updateClueComplete = function(x, y, o)
+	{
+		this.setClueComplete(x, y, o, this.isClueComplete(x, y, o));
+	}
+
+
+	this.selectSlot = function(slot)
+	{
+		if (null != slot[0]) {
+			CssAdd(slot[0], "focus");
+		}
+		for (var i = 0; i < slot.length; ++i) {
+			CssAdd(slot[i], "selected");
+		}
+	}
+	this.deselectSlot = function(slot)
+	{
+		if (null != slot[0]) {
+			CssRemove(slot[0], "focus");
+		}
+		for (var i = 0; i < slot.length; ++i) {
+			CssRemove(slot[i], "selected");
+		}
+	}
+
+	this.isCellBlank = function(x, y)
+	{
+		return null != this.editBox(x, y);
+	}
+
+	this.value = function(x, y)
+	{
+		var edit = this.editBox(x, y);
+		return edit.value;
+	}
+
+	this.modifyValue = function(x, y, v)
+	{
+		var edit = this.editBox(x, y);
+		var statusChanged = ((v == "") != (edit.value == ""));
+		edit.value = v;
+		if (statusChanged) {
+			this.updateClueComplete(x, y, newVertical()); 
+			this.updateClueComplete(x, y, newHorizontal()); 
+		}
+		if (x == this.m_x && y == this.m_y) {
+			this.m_xyModified = (v != "");
+		}
+		else {
+			this.m_xyModified = true;
+		}
+	}
+
+	this.toggleOrientation = function()
+	{
+		// Deselect previous slot
+		var slot = this.slot(this.m_x, this.m_y, this.m_orientation, false);
+		this.deselectSlot(slot);
+		var clue = this.clueOf(this.m_x, this.m_y, this.m_orientation);
+		if (null != clue) {
+			CssRemove(clue, "selected");
+		}
+		
+		// Switch orientation only if it's sensible
+		this.m_orientation.toggle();
+		if (null == this.cell(this.m_x-this.m_orientation.dx(), this.m_y-this.m_orientation.dy()) &&
+		    null == this.cell(this.m_x+this.m_orientation.dx(), this.m_y+this.m_orientation.dy()))
+		{
+			this.m_orientation.toggle();
+		}
+
+		// Select new slot
+		slot = this.slot(this.m_x, this.m_y, this.m_orientation, false);
+		this.selectSlot(slot);
+		clue = this.clueOf(this.m_x, this.m_y, this.m_orientation);
+		if (null != clue) {
+			CssAdd(clue, "selected");
+		}
+	}
+
+	this.changeCell = function(x, y)
+	{
+		var edit = this.editBox(x, y);
+		if (x != this.m_x || y != this.m_y) {
+			this.m_xyModified = false;
+		}
+		// Deselect previous slot
+		var slot = this.slot(this.m_x, this.m_y, this.m_orientation, false);
+		this.deselectSlot(slot);
+		var clue = this.clueOf(this.m_x, this.m_y, this.m_orientation);
+		if (null != clue) {
+			CssRemove(clue, "selected");
+		}
+
+		// Change cell
+		this.m_x = x;
+		this.m_y = y;
+		if (null != edit) {
+			edit.focus();
+
+			// Switch orientation if it isn't sensible
+			if (null == this.cell(x-this.m_orientation.dx(), y-this.m_orientation.dy()) &&
+					null == this.cell(x+this.m_orientation.dx(), y+this.m_orientation.dy()))
+			{
+				this.m_orientation.toggle();
+			}
+
+			// Select new slot
+			slot = this.slot(x, y, this.m_orientation, false);
+			this.selectSlot(slot);
+			clue = this.clueOf(x, y, this.m_orientation);
+			if (null != clue) {
+				CssAdd(clue, "selected");
+			}
+		}
+	}
+
+	this.changeCellRelative = function(x, y, dx, dy, ghost)
+	{
+		// Find next box
+		var edit;
+		do {
+			x += dx;
+			y += dy;
+			edit = this.editBox(x, y);
+		} while (ghost && null == edit && x >= 0 && y >= 0 && x < this.m_width && y < this.m_height);
+		if (null != edit) {
+			this.changeCell(x, y);
+		}
+	}
+
+	this.click = function(x, y, e)
+	{
+		if (this.m_x == x && this.m_y == y) {
+			this.toggleOrientation();
+		}
+		else {
+			this.changeCell(x, y);
+		}
+	}
+
+	this.keyPress = function(x, y, e)
+	{
+		var keyCode = e.keyCode;
+		var charCode = e.charCode;
+		// Character keys
+		if (charCode != 0) {
+			var charStr = String.fromCharCode(charCode).toUpperCase();
+			if (charStr == " ") {
+				this.modifyValue(x, y, "");
+			}
+			else {
+				var charcheck = /[a-zA-Z ]/;
+				var valid = charcheck.test(charStr);
+				if (valid) {
+					this.modifyValue(x, y, charStr);
+					this.changeCellRelative(x, y, this.orientation().dx(), this.orientation().dy(), false);
+				}
+			}
+			return false;
+		}
+		// Control keys
+		else if (keyCode != 0) {
+			if (keyCode == 8 /* backspace */) {
+				// If the cell not modified, go backwards first
+				var modified = this.m_xyModified;
+				this.changeCellRelative(x, y, -this.orientation().dx(), -this.orientation().dy(), false);
+				if (!modified) {
+					x = this.x();
+					y = this.y();
+				}
+				this.modifyValue(x, y, "");
+				return false;
+			}
+			else if (keyCode == 46  /* delete (others)*/ ||
+			         keyCode == 127 /* delete (konqueror) */) {
+				var val = this.value(x, y);
+				// Only move backwards if it was already blank
+				if (val == "") {
+					this.changeCellRelative(x, y, -this.orientation().dx(), -this.orientation().dy(), false);
+					x = this.x();
+					y = this.y();
+				}
+				this.modifyValue(x, y, "");
+				return false;
+			}
+			// arrow keys
+			else if (keyCode >= 37 && keyCode <= 40) {
+				var dx = 0;
+				var dy = 0;
+				if (keyCode == 37 /* left arrow */) {
+					dx = -1;
+				}
+				else if (keyCode == 38 /* up arrow */) {
+					dy = -1;
+				}
+				else if (keyCode == 39 /* right arrow */) {
+					dx = 1;
+				}
+				else if (keyCode == 40 /* down arrow */) {
+					dy = 1;
+				}
+				this.changeCellRelative(x, y, dx, dy, true);
+				this.m_xyModified = true;
+			}
+		}
+		return true;
+	}
+}
+
+function crosswordDeselect(name, e)
+{
+	return crossword(name).changeCell(-1, -1);
+}
+
+function crosswordClick(name, x, y, e)
+{
+	return crossword(name).click(x, y, e);
+}
+
+function crosswordSelectSlot(name, x, y, o, e)
+{
+	var xw = crossword(name);
+	xw.changeCell(x, y);
+	if (xw.orientation().isVertical() != (o == 1)) {
+		xw.toggleOrientation();
+	}
+}
+
+function crosswordKeyPress(name, x, y, e)
+{
+	return crossword(name).keyPress(x, y, e);
+}
+
+new Crossword("xw", 13, 13);
+
Index: public_html/stylesheets/crosswords.css
===================================================================
--- public_html/stylesheets/crosswords.css (revision 908f094a17624cda0bb96cc9b3634236ccd83c6e)
+++ public_html/stylesheets/crosswords.css (revision 908f094a17624cda0bb96cc9b3634236ccd83c6e)
@@ -0,0 +1,94 @@
+/* Styles for crosswords */
+/* Author: James Hogan */
+
+table.crossword {
+	border: 1px solid #FF6A00;
+	border-spacing: 0px;
+
+
+	text-align: center;
+	font-weight: bold;
+	font-size: 14pt;
+}
+
+table.crossword td sup {
+	font-weight: normal;
+	font-size: 8pt;
+	float: left;
+}
+
+table.crossword td input {
+	border: 0px solid white;
+	margin: 0px;
+	width: 100%;
+	height: 1.2em;
+	float: left;
+
+	text-align: center;
+	font-weight: bold;
+	font-size: 14pt;
+}
+
+table.crossword td {
+	background-color: white;
+	border: 1px solid #FF6A00;
+	padding: 0px;
+	margin: 0px;
+	vertical-align: bottom;
+
+	width: 1.5em;
+	height: 1.5em;
+}
+
+table.crossword td.blank {
+	background-color: #FF6A00;
+}
+
+table.crossword td.selected,
+table.crossword td.selected input {
+	background-color: #FFFF88;
+}
+
+table.crossword td.focus,
+table.crossword td.focus input {
+	background-color: #FFAA88;
+}
+
+div.crosswordBox {
+	float: left;
+	width: 60%;
+	padding: 0px;
+	margin: 0px;
+}
+
+div.crosswordCluesBox {
+	float: left;
+	width: 40%;
+	padding: 0px;
+	margin: 0px;
+}
+
+div.crosswordClues {
+	border: 2px solid #FF6A00;
+	padding: 0.5em;
+	margin: 0px 0px 0.5em 0.5em;
+}
+
+div.crosswordClues h2 {
+	margin: 0.2em;
+}
+
+div.crosswordClues p {
+	margin: 0px;
+	cursor: pointer;
+}
+
+div.crosswordClues p.complete {
+	text-decoration: line-through;
+}
+
+div.crosswordClues p.selected {
+	background-color: #FFFF88;
+	border: 1px solid #FFAA88
+}
+
Index: system/application/controllers/crossword.php
===================================================================
--- system/application/controllers/crossword.php (revision 908f094a17624cda0bb96cc9b3634236ccd83c6e)
+++ system/application/controllers/crossword.php (revision 908f094a17624cda0bb96cc9b3634236ccd83c6e)
@@ -0,0 +1,61 @@
+<?php
+
+/** Displays and manages crossword puzzles
+ */
+class Crossword extends Controller
+{
+	function __construct()
+	{
+		parent::Controller();
+
+		$this->load->helper("crossword");
+	}
+
+	function index()
+	{
+		if (!CheckPermissions('admin')) return;
+
+		$crossword = new CrosswordPuzzle(13, 13);
+		// Across
+		$crossword->addSlot(1, 0, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Ordered pile", "ababa"));
+		$crossword->addSlot(7, 0, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Abyss", "ababa"));
+		$crossword->addSlot(0, 2, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Applaud with shouts", "ababa"));
+		$crossword->addSlot(6, 2, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Destroy completely", "aba baba"));
+		$crossword->addSlot(0, 4, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Small frozen blocks", "aba babab"));
+		$crossword->addSlot(9, 4, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Slight quarrel", "abab"));
+		$crossword->addSlot(0, 6, CrosswordGrid::$HORIZONTAL, new CrosswordClue("One who damages property", "vandal"));
+		$crossword->addSlot(7, 6, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Japanese garment", "ababab"));
+		$crossword->addSlot(0, 8, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Drinking vessels", "abab"));
+		$crossword->addSlot(5, 8, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Moving to pity", "abababab"));
+		$crossword->addSlot(0, 10, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Knitting rods", "needles"));
+		$crossword->addSlot(8, 10, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Summarise", "ababa"));
+		$crossword->addSlot(1, 12, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Book of maps", "atlas"));
+		$crossword->addSlot(7, 12, CrosswordGrid::$HORIZONTAL, new CrosswordClue("Coil, spin", "ababa"));
+		// Down
+		$crossword->addSlot(2, 0, CrosswordGrid::$VERTICAL, new CrosswordClue("Topic", "ababa"));
+		$crossword->addSlot(4, 0, CrosswordGrid::$VERTICAL, new CrosswordClue("Widely distributed notice", "abababab"));
+		$crossword->addSlot(8, 0, CrosswordGrid::$VERTICAL, new CrosswordClue("Beer incredient", "abab"));
+		$crossword->addSlot(10, 0, CrosswordGrid::$VERTICAL, new CrosswordClue("Star sign", "abababa"));
+		$crossword->addSlot(0, 1, CrosswordGrid::$VERTICAL, new CrosswordClue("Accomplishment", "abababababa"));
+		$crossword->addSlot(6, 1, CrosswordGrid::$VERTICAL, new CrosswordClue("Sugary", "ababa"));
+		$crossword->addSlot(12, 1, CrosswordGrid::$VERTICAL, new CrosswordClue("Medical instrument", "abababababa"));
+		$crossword->addSlot(8, 5, CrosswordGrid::$VERTICAL, new CrosswordClue("Remove or take away", "abababab"));
+		$crossword->addSlot(2, 6, CrosswordGrid::$VERTICAL, new CrosswordClue("Negligence", "abababa"));
+		$crossword->addSlot(6, 7, CrosswordGrid::$VERTICAL, new CrosswordClue("Light wood", "ababa"));
+		$crossword->addSlot(10, 8, CrosswordGrid::$VERTICAL, new CrosswordClue("Carpet nails", "ababa"));
+		$crossword->addSlot(4, 9, CrosswordGrid::$VERTICAL, new CrosswordClue("Jumping insect", "abab"));
+
+		$crosswordView = new CrosswordView($crossword);
+
+		$data = array();
+		$data['crossword'] = $crosswordView;
+
+		$this->main_frame->SetContentSimple('crossword/index', $data);
+		$this->main_frame->includeCss('stylesheets/crosswords.css');
+		$this->main_frame->includeJs('javascript/crossword.js');
+		$this->main_frame->Load();
+	}
+
+}
+
+?>
Index: system/application/helpers/crossword_helper.php
===================================================================
--- system/application/helpers/crossword_helper.php (revision 908f094a17624cda0bb96cc9b3634236ccd83c6e)
+++ system/application/helpers/crossword_helper.php (revision 908f094a17624cda0bb96cc9b3634236ccd83c6e)
@@ -0,0 +1,490 @@
+<?php
+
+/// A clue in a crossword puzzle.
+class CrosswordClue
+{
+	/// Construct a clue.
+	function __construct($clue, $solution)
+	{
+		$this->m_clue = $clue;
+		$this->m_solution = split(' ', strtoupper($solution));
+	}
+
+	/*
+	 * Accessors
+	 */
+
+	/// Get the clue.
+	function clue()
+	{
+		return $this->m_clue;
+	}
+
+	/// Get the solution.
+	function solution()
+	{
+		return join('', $this->m_solution);
+	}
+
+	/// Get the absolute length of the solution.
+	function length()
+	{
+		return strlen($this->solution());
+	}
+
+	/// Get the length of the solution words.
+	function wordLengths()
+	{
+		$results = array();
+		foreach ($this->m_solution as $word)
+		{
+			$results[] = strlen($word);
+		}
+		return $results;
+	}
+
+	/*
+	 * Private variables
+	 */
+
+	/// The clue.
+	private $m_clue;
+
+	/// The solution.
+	private $m_solution;
+}
+
+/// A slot in the grid.
+class CrosswordGridSlot
+{
+	/// Construct.
+	function __construct($x, $y, $orientation, $length)
+	{
+		$this->m_x = $x;
+		$this->m_y = $y;
+		$this->m_orientation = $orientation;
+		$this->m_length = $length;
+	}
+
+	/*
+	 * Accessors
+	 */
+
+	function x()
+	{
+		return $this->m_x;
+	}
+	function y()
+	{
+		return $this->m_y;
+	}
+	function orientation()
+	{
+		return $this->m_orientation;
+	}
+	function length()
+	{
+		return $this->m_length;
+	}
+
+	function dx()
+	{
+		return ($this->m_orientation == CrosswordGrid::$HORIZONTAL ? 1 : 0);
+	}
+	function dy()
+	{
+		return ($this->m_orientation == CrosswordGrid::$VERTICAL   ? 1 : 0);
+	}
+
+	/*
+	 * Private variables
+	 */
+
+	/// Coordinates of slot.
+	private $m_x, $m_y;
+
+	/// Orientation of slot.
+	private $m_orientation;
+
+	/// Length of slot.
+	private $m_length;
+}
+
+/// A crossword grid.
+class CrosswordGrid
+{
+	static $HORIZONTAL = 0;
+	static $VERTICAL   = 1;
+
+
+	/// Construct a crossword grid.
+	function __construct($width, $height)
+	{
+		$this->m_width = $width;
+		$this->m_height = $height;
+		$this->m_slots = array(self::$HORIZONTAL => array(),
+		                       self::$VERTICAL   => array());
+		$this->m_grid = array();
+		for ($x = 0; $x < $width; ++$x) {
+			for ($y = 0; $y < $height; ++$y) {
+				$this->m_grid[$x][$y] = null;
+			}
+		}
+	}
+
+	/*
+	 * Modifiers
+	 */
+
+	/// Clear the solutions from the grid.
+	function clearSolutions()
+	{
+		for ($x = 0; $x < $this->m_width; ++$x) {
+			for ($y = 0; $y < $this->m_height; ++$y) {
+				if (null != $this->m_grid[$x][$y]) {
+					$this->m_grid[$x][$y] = '';
+				}
+			}
+		}
+	}
+
+	/** Add a slot to the grid.
+	 * @returns true if successful, false otherwise.
+	 */
+	function addSlot($slot)
+	{
+		$this->m_slots[$slot->orientation()][$slot->x()][$slot->y()] = &$slot;
+		ksort($this->m_slots[$slot->orientation()]);
+		ksort($this->m_slots[$slot->orientation()][$slot->x()]);
+		$dx = $slot->dx();
+		$dy = $slot->dy();
+		for ($i = 0; $i < $slot->length(); ++$i) {
+			$this->setCellState($slot->x()+($i*$dx),
+					$slot->y()+($i*$dy), "", false);
+		}
+		return true;
+	}
+
+	/// Find whether a slot is unused.
+	function slotUnused($slot)
+	{
+		$dx = $slot->dx();
+		$dy = $slot->dy();
+		for ($i = 0; $i < $slot->length(); ++$i) {
+			if (is_string($this->cellState($slot->x()+($i*$dx),
+			                               $slot->y()+($i*$dy)))) {
+				return false;
+			}
+		}
+		return true;
+	}
+
+	/** Set the state of a cell.
+	 * @param $x int X coordinate.
+	 * @param $y int Y coordinate.
+	 * @param $state null/string State at (@p $x, @p $y).
+	 *               Must be null, "", or a single capital letter.
+	 * @param $onlyIfSlot bool Prevents change if coordinates specify a blank.
+	 * @returns true on success, false otherwise.
+	 */
+	function setCellState($x, $y, $state, $onlyIfSlot = true)
+	{
+		if ($x >= 0 && $y >= 0 &&
+		    $x < $this->m_width && $y < $this->m_height &&
+		    (!$onlyIfSlot || $this->m_grid[$x][$y] !== null)
+			) {
+			if (null !== $state) {
+				if (is_string($state)) {
+					$state = "$state";
+					$len = strlen($state);
+					if ($len > 1) {
+						$state = substr($state, 0, 1);
+					}
+					$state = strtoupper($state);
+				}
+			}
+			$this->m_grid[$x][$y] = $state;
+			return true;
+		}
+		else {
+			return false;
+		}
+	}
+
+	/** Set the text of multiple adjacent cells.
+	 * @param $slot Slot Slot description object.
+	 * @param $text string text.
+	 * @returns Number of cells changed.
+	 */
+	function setSlotText($slot, $text)
+	{
+		$len = strlen($text);
+		$dx = $slot->dx();
+		$dy = $slot->dy();
+		for ($i = 0; $i < $len; ++$i) {
+			if (!$this->setCellState($slot->x()+($i*$dx),
+			                         $slot->y()+($i*$dy), substr($text, $i, 1), true)) {
+				return $i;
+			}
+		}
+		return $len;
+	}
+
+	/*
+	 * Accessors
+	 */
+
+	/// Get the width of the grid.
+	function width()
+	{
+		return $this->m_width;
+	}
+
+	/// Get the height of the grid.
+	function height()
+	{
+		return $this->m_height;
+	}
+
+	/** Find the status of a cell.
+	 * @returns (null, false, string) = (out of range, black, value)
+	 */
+	function cellState($x, $y)
+	{
+		if ($x >= 0 && $y >= 0 && $x < $this->m_width && $y < $this->m_height) {
+			$state = $this->m_grid[$x][$y];
+			if (null !== $state) {
+				return $state;
+			}
+			else {
+				return false;
+			}
+		}
+		else {
+			return null;
+		}
+	}
+
+	/** Get the list of slots overlapping a cell.
+	 * @returns array[Slot]
+	 */
+	function slotsAt($x, $y, $immediate = true)
+	{
+		$results = array();
+		// Horizontal
+		if ($x < $this->m_width) {
+			$i = $x;
+			while ($i >= 0 && null !== $this->m_grid[$i][$y]) {
+				if (isset($this->m_slots[self::$HORIZONTAL][$i][$y])) {
+					$results[] = &$this->m_slots[self::$HORIZONTAL][$i][$y];
+					break;
+				}
+				if ($immediate) {
+					break;
+				}
+				--$i;
+			}
+		}
+		// Vertical
+		if ($y < $this->m_height) {
+			$i = $y;
+			while ($i >= 0 && null !== $this->m_grid[$x][$i]) {
+				if (isset($this->m_slots[self::$VERTICAL][$x][$i])) {
+					$results[] = &$this->m_slots[self::$VERTICAL][$x][$i];
+					break;
+				}
+				if ($immediate) {
+					break;
+				}
+				--$i;
+			}
+		}
+		return $results;
+	}
+
+	/*
+	 * Private variables
+	 */
+
+	/// Number of cells wide.
+	private $m_width;
+
+	/// Number of cells high.
+	private $m_height;
+
+	/// Slots indexed by orientation, X, Y coordinate.
+	private $m_slots;
+
+	/// array[int x=>array[int y=>{null,string}]]
+	private $m_grid;
+}
+
+class CrosswordPuzzleSlot extends CrosswordGridSlot
+{
+	function __construct($x, $y, $orientation, &$clue)
+	{
+		parent::__construct($x, $y, $orientation, $clue->length());
+		$this->m_clue = &$clue;
+	}
+
+	/*
+	 * Accessors
+	 */
+	
+	/// Get the clue in this slot.
+	function clue()
+	{
+		return $this->m_clue;
+	}
+
+	/*
+	 * Private variables
+	 */
+
+	/// The clue in this slot.
+	private $m_clue;
+}
+
+/// A crossword puzzle.
+class CrosswordPuzzle
+{
+	function __construct($width, $height)
+	{
+		$this->m_grid = new CrosswordGrid($width, $height);
+	}
+
+	/*
+	 * Modifiers
+	 */
+
+	/** Add a slot to the grid.
+	 */
+	function addSlot($x, $y, $orientation, &$clue)
+	{
+		$slot = new CrosswordPuzzleSlot($x, $y, $orientation, $clue);
+		$this->m_grid->addSlot($slot);
+		$this->m_grid->setSlotText($slot, $clue->solution());
+	}
+
+	/*
+	 * Modifiers
+	 */
+
+	/// Get the grid.
+	function grid()
+	{
+		return $this->m_grid;
+	}
+
+	/*
+	 * Private variables
+	 */
+
+	private $m_grid;
+}
+
+class CrosswordView
+{
+	function __construct(&$crossword)
+	{
+		$this->m_crossword = $crossword;
+	}
+
+	function Load()
+	{
+		$name = 'xw';
+		$grid = &$this->m_crossword->grid();
+		$height = $grid->height();
+		$width = $grid->width();
+		$clueNumber = 0;
+		$clues = array();
+
+		?><div class="crosswordBox"><?php
+		// Render main crossword grid
+		?><table class="crossword"><?php
+		echo("\n");
+		for ($y = 0; $y < $height; ++$y) {
+			?><tr><?php
+			for ($x = 0; $x < $width; ++$x) {
+				$state = $grid->cellState($x, $y);
+				$used = is_string($state);
+				if ($used) {
+					?><td id="<?php echo("$name-$x-$y"); ?>" <?php
+						?>onclick="return crosswordClick(<?php echo("'$name', $x, $y, event") ?>)"><?php
+
+					// Clue number
+					$slots = $grid->slotsAt($x, $y, true);
+					if (!empty($slots)) {
+						++$clueNumber;
+						foreach ($slots as &$slot) {
+							$clues[$slot->orientation()][$clueNumber] = array($slot->clue(), $x, $y);
+						}
+						?><sup><?php echo($clueNumber); ?></sup><?
+					}
+					// Text input box
+					?><input type="text" cols="1" maxlength="2" <?php
+					       ?>id="<?php echo("$name-edit-$x-$y"); ?>" <?php
+					       ?>onkeypress="return crosswordKeyPress(<?php echo("'$name', $x, $y, event") ?>)" <?php
+					       ?>value="<?php
+							//echo(xml_escape($state));
+						   ?>" /><?php
+					?></td><?php
+				}
+				else {
+					// Nothing but a blank placemarker
+					?><td class="blank" <?php
+						?>onclick="return crosswordDeselect(<?php echo("'$name', event") ?>)" /><?php
+				}
+			}
+			?></tr><?php
+			echo("\n");
+		}
+		?></table><?php
+		?></div><?php
+
+		// List of clues
+		$titles = array(CrosswordGrid::$HORIZONTAL => "Across",
+		                CrosswordGrid::$VERTICAL   => "Down");
+		?><div class="crosswordCluesBox"><?php
+		foreach ($clues as $orientation => &$oclues) {
+			?><div class="crosswordClues"><?php
+			?><h2><?php
+			echo(xml_escape($titles[$orientation]));
+			?></h2><?php
+			echo("\n");
+			foreach ($oclues as $number => &$clueInfo) {
+				$clue = &$clueInfo[0];
+				$x = $clueInfo[1];
+				$y = $clueInfo[2];
+				?><p id="<?php echo("$name-clue-$x-$y-$orientation"); ?>" <?php
+					?>onclick="crosswordSelectSlot(<?php echo("'$name', $x, $y, $orientation, event"); ?>)"><?php
+				echo($number.' ');
+				$lengths = $clue->wordLengths();
+				echo(xml_escape($clue->clue()));
+				?> (<?php echo(join(',', $lengths)); ?>)<?php
+				?></p><?php
+
+				if (false) {
+					$solution = $clue->solution();
+					$length = strlen($solution);
+					?><table class="crossword"><?php
+					?><tr class="small"><?php
+					for ($i = 0; $i < $length; ++$i) {
+						?><td><?php
+						echo(xml_escape(substr($solution, $i, 1)));
+						?></td><?php
+					}
+					?></tr><?php
+					?></table><?php
+				}
+				echo("\n");
+			}
+			?></div><?php
+		}
+		?></div><?php
+	}
+
+	private $m_crossword;
+}
+
+?>
Index: system/application/views/crossword/index.php
===================================================================
--- system/application/views/crossword/index.php (revision 908f094a17624cda0bb96cc9b3634236ccd83c6e)
+++ system/application/views/crossword/index.php (revision 908f094a17624cda0bb96cc9b3634236ccd83c6e)
@@ -0,0 +1,3 @@
+<?php
+$crossword->Load();
+?>
