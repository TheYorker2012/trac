Index: public_html/javascript/office_interface.js
===================================================================
--- public_html/javascript/office_interface.js (revision a78f40bba94febcae96488600c2b4ddb66d4292f)
+++ public_html/javascript/office_interface.js (revision d632b05df9693655807d0646c18519a707b62454)
@@ -1,11 +1,121 @@
-var start_page = 'announcements';
-var popup_shown = false;
+var oi_startPage = 'brief';
+var oi_articleData = new Array();
+var oi_photoData = new Array();
+var oi_photoTypeData = new Array();
+var oi_popupShown = false;
+
+function setStartPage (page_id) {
+	oi_startPage = page_id;
+}
+
+function setData (data) {
+	oi_articleData = data['article'];
+	oi_photoData = data['photos'];
+	oi_photoTypeData = data['photo_types'];
+}
 
 function loadPage () {
-	switchPage(start_page);
+	loadArticleData(oi_articleData);
+	loadPhotoData(oi_photoData, oi_articleData['thumbnail_photo_id'], oi_articleData['main_photo_id']);
+	switchPage(oi_startPage);
+}
+
+function loadArticleData (articleData) {
+	// Populate form elements with data
+	for (key in articleData) {
+		var control = document.getElementById('article_' + key);
+		if (control !== null && control !== undefined) {
+			switch (control.tagName) {
+				case 'INPUT':
+				case 'TEXTAREA':
+					control.value = articleData[key];
+					break;
+				case 'SELECT':
+					for (var i = 0; i < control.length; i++) {
+						if (control.options[i].value == articleData[key]) {
+							control.selectedIndex = i;
+							break;
+						}
+					}
+					break;
+				case 'DIV':
+					control.innerHTML = articleData[key];
+					break;
+				default:
+					alert('Unknown control type "' + control.tagName + '" for "' + key + '"');
+			}
+		}
+	}
+}
+
+function loadPhotoData (photoData, thumbnail_id, intro_id) {
+	var container = document.getElementById('photo_container');
+	for (var x = 0; x < photoData.length; x++) {
+		// Slot
+		var slot = document.createElement('div');
+		slot.className = 'photo_slot';
+		container.appendChild(slot);
+		// Photo preview
+		var slot_img = document.createElement('img');
+		slot_img.src = '/photos/medium/' + photoData[x]['photo_id'];
+		slot_img.alt = photoData[x]['photo_alt'];
+		var slot_link = document.createElement('a');
+		slot_link.href = '/office/gallery/show/' + photoData[x]['photo_id'];
+		slot_link.appendChild(slot_img);
+		slot.appendChild(slot_link);
+		// Photo title
+		var slot_heading = document.createElement('div');
+		slot_heading.innerHTML = 'Photo Number #' + photoData[x]['photo_number'];
+		slot.appendChild(slot_heading);
+		// Photo Caption
+		var slot_label = document.createElement('label');
+		slot_label.appendChild(document.createTextNode('Caption:'));
+		slot.appendChild(slot_label);
+		var slot_input = document.createElement('input');
+		slot_input.type = 'text';
+		slot_input.value = photoData[x]['photo_caption'];
+		slot.appendChild(slot_input);
+		// Photo ALT
+		var slot_label = document.createElement('label');
+		slot_label.appendChild(document.createTextNode('ALT / Hover:'));
+		slot.appendChild(slot_label);
+		var slot_input = document.createElement('input');
+		slot_input.type = 'text';
+		slot_input.value = photoData[x]['photo_alt'];
+		slot.appendChild(slot_input);
+		// Photo size
+		var slot_label = document.createElement('label');
+		slot_label.appendChild(document.createTextNode('Size:'));
+		slot.appendChild(slot_label);
+		var slot_size = document.createElement('select');
+		for (var y = 0; y < oi_photoTypeData.length; y++) {
+			slot_size.options[slot_size.length] = new Option(oi_photoTypeData[y]['name'], oi_photoTypeData[y]['id'], (oi_photoTypeData[y]['id'] == photoData[x]['photo_type']));
+		}
+		slot.appendChild(slot_size);
+		// Thumbnail?
+		var slot_label = document.createElement('label');
+		slot_label.appendChild(document.createTextNode('Thumbnail:'));
+		slot.appendChild(slot_label);
+		var slot_thumb = document.createElement('input');
+		slot_thumb.type = 'checkbox';
+		if (thumbnail_id == photoData[x]['photo_number']) {
+			slot_thumb.checked = true;
+		}
+		slot.appendChild(slot_thumb);
+		// Main Photo?
+		var slot_label = document.createElement('label');
+		slot_label.appendChild(document.createTextNode('Intro Photo:'));
+		slot.appendChild(slot_label);
+		var slot_thumb = document.createElement('input');
+		slot_thumb.type = 'checkbox';
+		if (intro_id == photoData[x]['photo_number']) {
+			slot_thumb.checked = true;
+		}
+		slot.appendChild(slot_thumb);
+	}
 }
 
 function switchPage (page_id) {
-	if ((!popup_shown) && (document.getElementById('nav_' + page_id).className != 'disabled')) {
+	if ((!oi_popupShown) && (document.getElementById('nav_' + page_id).className != 'disabled')) {
 		/* Change selected menu option */
 		var nav = document.getElementById('office_nav');
Index: public_html/stylesheets/office.css
===================================================================
--- public_html/stylesheets/office.css (revision 49ac4f824709cbe732984aa0ff43d3a0229b1e8a)
+++ public_html/stylesheets/office.css (revision d632b05df9693655807d0646c18519a707b62454)
@@ -7,25 +7,2 @@
 .hide { display: none; }
 .show { display: block; }
-
-/* Formatting for the navigation on the left */
-div#NavigationMenu ul {
-	display: block;
-	list-style: none outside none;
-	margin: 0;
-	padding: 0;
-	border-top: 0;
-}
-
-div#NavigationMenu ul.first {
-	border-top: 0;
-}
-
-div#NavigationMenu ul li {
-	border-top: 1px solid #ccc;
-	padding: 3px 0px 3px 4px;
-}
-
-div#NavigationMenu ul li.first {
-	border-top: 0;
-	font-weight: bold;
-}
Index: public_html/stylesheets/office_interface.css
===================================================================
--- public_html/stylesheets/office_interface.css (revision 49ac4f824709cbe732984aa0ff43d3a0229b1e8a)
+++ public_html/stylesheets/office_interface.css (revision d632b05df9693655807d0646c18519a707b62454)
@@ -75,5 +75,5 @@
 
 /*div#office_container div#office_sidebar ul li#nav_announcements { list-style-image: url('/images/icons/page_white_stack.png'); }*/
-div#office_container div#office_sidebar ul li#nav_announcements { list-style-image: url('/images/icons/comments.png'); }
+div#office_container div#office_sidebar ul li#nav_brief { list-style-image: url('/images/icons/comments.png'); }
 div#office_container div#office_sidebar ul li#nav_article { list-style-image: url('/images/icons/report.png'); }
 div#office_container div#office_sidebar ul li#nav_photos { list-style-image: url('/images/icons/picture.png'); }
@@ -96,5 +96,8 @@
 }
 
-
+div#office_container .heading {
+	font-size: 20px;
+	margin: 0.1em;
+}
 
 
@@ -102,4 +105,25 @@
  *	Specific Page Content
  */
+
+div#page_photos div.photo_slot {
+	float: left;
+	width: 33%;
+	text-align: center;
+}
+
+div#page_photos div.photo_slot div {
+	font-weight: bold;
+}
+
+div#page_photos div.photo_slot label {
+	width: 30%;
+}
+
+
+
+
+
+
+
 
 div.office_page div.actions {
Index: public_html/stylesheets/v2-iefix.css
===================================================================
--- public_html/stylesheets/v2-iefix.css (revision c54c7898e9cf5bc761b9d6fe2012fec02bb64296)
+++ public_html/stylesheets/v2-iefix.css (revision d632b05df9693655807d0646c18519a707b62454)
@@ -1,3 +1,3 @@
 div#MainBodyPane {
 	zoom: 1.0;
-}	
+}
Index: public_html/stylesheets/v2.css
===================================================================
--- public_html/stylesheets/v2.css (revision c38a8ef6d889d1497c5bb6612513e8756b763497)
+++ public_html/stylesheets/v2.css (revision d632b05df9693655807d0646c18519a707b62454)
@@ -336,16 +336,33 @@
 
 div#ContentColumn {
-	margin-left: 130px;
-}
-
-div.FlexiBox {
-	float: left;
-	margin: 0 5px 5px 0;
+	margin-left: 125px;
+}
+
+/* Formatting for content boxes in main page area */
+div.BlueBox, div.FlexiBox {
+	float: left;
+	margin: 0 0 0.5em 0;
 	border: 1px solid #999;
 	background-color: #ffffff;
+	text-align: left;
+	width: 100%;
+}
+
+div.BlueBox h2 {
+	color: #999;
+}
+
+div.BlueBox h3 {
+	color: black;
+	margin-bottom: 0;
+}
+
+div.BlueBox > * {
+	margin: 10px;
 }
 
 div.Box13 {
 	width: 320px;
+	margin-right: 5px;
 	border: 0;
 }
@@ -353,4 +370,5 @@
 div.Box13b {
 	width: 318px;
+	margin-right: 5px;
 }
 
@@ -368,4 +386,5 @@
 div.Box23 {
 	width: 645px;
+	margin-right: 5px;
 	border: 0;
 }
@@ -373,4 +392,5 @@
 div.Box23b {
 	width: 643px;
+	margin-right: 5px;
 }
 
@@ -490,29 +510,4 @@
 	margin-right: 330px;
 }
-
-/* Formatting for content boxes in main page area */
-div.BlueBox {
-	border: 1px solid #999;
-	margin: 0em 0em 0.5em 0em;
-	text-align: left;
-	background-color: #ffffff;
-
-	float: left;
-	width: 100%;
-}
-
-div.BlueBox h2 {
-	color: #999;
-}
-
-div.BlueBox h3 {
-	color: black;
-	margin-bottom: 0;
-}
-
-div.BlueBox > * {
-	margin: 10px;
-}
-
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Index: system/application/controllers/office/article.php
===================================================================
--- system/application/controllers/office/article.php (revision d632b05df9693655807d0646c18519a707b62454)
+++ system/application/controllers/office/article.php (revision d632b05df9693655807d0646c18519a707b62454)
@@ -0,0 +1,1204 @@
+<?php
+
+/**
+ *	Yorker Office - Article Manager
+ *	@author Chris Travis (cdt502 - ctravis@gmail.com)
+ */
+
+class Article extends Controller
+{
+
+	function __construct()
+	{
+		parent::Controller();
+
+		//$this->load->model('news_model');
+		//$this->load->model('requests_model');
+		$this->load->model('article_model');
+		$this->load->model('photos_model');
+	}
+
+	function _remap ($method = NULL)
+	{
+		if (empty($method)) {
+			redirect('/office/articles');
+		} elseif (method_exists($this, $method)) {
+			$this->$method();
+		} else {
+			$this->index($method);
+		}
+	}
+
+	function index ($article_id = NULL)
+	{
+		if (!CheckPermissions('office')) return;
+		if (!CheckRolePermissions('ARTICLE_VIEW')) return;
+		$data = array();
+
+		// Have we got an article to load?
+		if (empty($article_id)) show_404();
+		$data['article'] = $this->article_model->getById($article_id);
+
+		// Does the article exist?
+		if (empty($data['article'])) show_404();
+
+		// Setup AJAX functionality
+		$this->load->library('xajax');
+		$this->xajax->processRequests();
+
+		// Get more article data
+		$data['photos'] = $this->photos_model->GetPhotoRequestsForArticle($article_id);
+
+		// Get possible field values
+		$data['types'] = $this->article_model->getAllContentTypes();
+		$data['photo_types'] = $this->photos_model->GetThumbnailTypes();
+
+
+		if (!empty($_SESSION['oi_defaultPage'])) {
+			$data['start_page'] = $_SESSION['oi_defaultPage'];
+			unset($_SESSION['oi_defaultPage']);
+		} else {
+			$data['start_page'] = 'brief';
+		}
+		$data['articleJS'] = json_encode(array(
+			'article'		=>	$data['article'],
+			'photos'		=>	$data['photos'],
+			'photo_types'	=>	$data['photo_types']
+		));
+		$this->main_frame->SetContentSimple('office/article/main', $data);
+		$this->main_frame->IncludeJs('javascript/wikitoolbar.js');
+		$this->main_frame->IncludeJs('/javascript/office_interface.js');
+		$this->main_frame->IncludeCss('/stylesheets/office_interface.css');
+		$this->main_frame->SetExtraHead($this->xajax->getJavascript(null, '/javascript/xajax.js'));
+		$this->main_frame->Load();
+	}
+
+	function create ()
+	{
+	}
+	
+	function ajax ()
+	{
+	}
+
+
+
+
+	function _remap2($method = NULL)
+	{
+		if (!CheckPermissions('office')) return;
+		if (empty($method)) {
+			if (!CheckRolePermissions('ARTICLE_ADD')) return;
+			$article_id = 0;
+		} else {
+			if (!CheckRolePermissions('ARTICLE_VIEW')) return;
+			$article_id = $method;
+		}
+
+		$data = array();
+
+		$this->load->library('xajax');
+		$this->xajax->registerFunction(array('_addComment', &$this, '_addComment'));
+		$this->xajax->processRequests();
+
+
+		$this->main_frame->SetContentSimple('office/article/main', $data);
+		$this->main_frame->IncludeJs('javascript/wikitoolbar.js');
+		$this->main_frame->IncludeCss('/stylesheets/office_interface.css');
+		$this->main_frame->IncludeJs('/javascript/office_interface.js');
+		$this->main_frame->SetExtraHead($this->xajax->getJavascript(null, '/javascript/xajax.js'));
+		$this->main_frame->Load();
+	}
+
+
+
+
+
+	function index2($type_info)
+	{
+		/// Make sure users have necessary permissions to view this page
+		if (!CheckPermissions('office')) return;
+
+		/// Get changeable page content
+		$this->pages_model->SetPageCode('office_news_home');
+		/// Get page content
+		$data['tasks_heading'] = $this->pages_model->GetPropertyText('news_office:tasks_heading', TRUE);
+		$data['mine_heading'] = $this->pages_model->GetPropertyText('news_office:my_jobs_heading', TRUE);
+
+		$data['box_contents'] = $this->requests_model->GetArticlesForBox($type_info['codename'], $this->user_auth->entityId);
+		$data['parent_type'] = $type_info['has_children'];
+		//$data['box_display_name'] = $type_info['name'];
+
+		/// Make it so we only have to worry about two levels of access as admins can do everything editors can
+		$data['user_level'] = GetUserLevel();
+		if ($data['user_level'] == 'admin') {
+			$data['user_level'] = 'editor';
+		}
+		/// Get different content based on access
+		if ($data['user_level'] == 'editor') {
+			$data['tasks']['request'] = $this->pages_model->GetPropertyText('news_office:tasks_request_editor', TRUE);
+		} else {
+			$data['tasks']['request'] = $this->pages_model->GetPropertyText('news_office:tasks_request', TRUE);
+		}
+		
+		//from the editor message
+		$data['main_text'] = $this->pages_model->GetPropertyWikitext($type_info['codename'].'_main_text');
+
+		/// Set up the main frame
+		$this->main_frame->SetContentSimple('office/news/home', $data);
+		/// Set page title & load main frame with view
+		$this->main_frame->SetTitleParameters(
+			array('section' => $type_info['name'])
+		);
+		$this->main_frame->Load();
+	}
+
+
+	/**
+	 *	@brief Create a new suggestion/request
+	 */
+	function request()
+	{
+		/// Make sure users have necessary permissions to view this page
+		if (!CheckPermissions('office')) return;
+
+		/// Get changeable page content
+		$this->pages_model->SetPageCode('office_news_request');
+		/// Get page content
+		$data['boxes'] = $this->requests_model->getBoxes();
+		/// @TODO: this needs to get reporters only part of the article type yorker sub-team
+		$data['reporters'] = $this->requests_model->getReporters();
+		$data['tasks_heading'] = $this->pages_model->GetPropertyText('news_office:tasks_heading', TRUE);
+
+		/// Make it so we only have to worry about two levels of access as admins can do everything editors can
+		$data['user_level'] = GetUserLevel();
+		if ($data['user_level'] == 'admin') {
+			$data['user_level'] = 'editor';
+		}
+		/// Get different content based on access
+		if ($data['user_level'] == 'editor') {
+			$data['heading'] = $this->pages_model->GetPropertyText('heading_editor');
+			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro_editor');
+			$data['status'] = 'request';
+		} else {
+			$data['heading'] = $this->pages_model->GetPropertyText('heading');
+			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro');
+			$data['status'] = 'suggestion';
+		}
+
+		/// Perform validation checks on submitted data
+		$this->load->library('validation');
+		$this->validation->set_error_delimiters('<li>','</li>');
+		/// Validation rules
+		$rules['r_title'] = 'trim|required|xss_clean';
+		$fields['r_title'] = 'title';
+		$rules['r_brief'] = 'trim|required|xss_clean';
+		$fields['r_brief'] = 'brief';
+		$rules['r_box'] = 'trim|required|xss_clean';
+		$fields['r_box'] = 'box';
+		if ($data['status'] == 'request') {
+			$rules['r_deadline'] = 'trim|required|numeric';
+			$fields['r_deadline'] = 'deadline';
+			$rules['r_reporter'] = '';
+			$fields['r_reporter'] = 'reporter';
+		}
+		$this->validation->set_rules($rules);
+		$this->validation->set_fields($fields);
+		/// Run validation checks, if they pass proceed to conduct db integrity checks
+		$errors = array();
+		if ($this->validation->run()) {
+			$deadline = NULL;
+			if ($data['status'] == 'request') {
+				if ($this->input->post('r_deadline') < mktime()) {
+					$errors[] = 'Please select a deadline in the future';
+				} elseif ($this->input->post('r_deadline') > (mktime() + (60*60*24*365))) {
+					$errors[] = 'Please select a deadline within the next year';
+				} else {
+					$deadline = $this->input->post('r_deadline');
+				}
+				$valid = true;
+				if (count($this->input->post('r_reporter')) == 0) {
+					$valid = false;
+				}
+				if($this->input->post('r_reporter')) {
+					foreach ($this->input->post('r_reporter') as $reporter) {
+						if (!is_numeric($reporter)) {
+							$valid = false;
+						}
+					}
+					if ((!$valid) || (!$this->requests_model->reportersExist($this->input->post('r_reporter')))) {
+						$errors[] = 'Please choose the reporters you wish to assign the request to';
+					}
+				}
+			}
+			if (!$this->requests_model->isBox($this->input->post('r_box'))) {
+				$errors[] = 'Please select the box you wish the ' . $data['status'] . ' to be submitted to';
+			}
+
+			/// If no db integrity errors then save request
+			if (count($errors) == 0) {
+				if ($deadline != NULL) {
+					$deadline = date('Y-m-d H:i:s', $deadline);
+				}
+				$article_id = $this->requests_model->CreateRequest($data['status'],$this->input->post('r_box'),$this->input->post('r_title'),$this->input->post('r_brief'),$this->user_auth->entityId,$deadline);
+				if ($data['status'] == 'request') {
+					$accept_data = array(
+						'editor' 		=>	$this->user_auth->entityId,
+						'publish_date' 	=>	$deadline,
+						'title'			=>	$this->input->post('r_title'),
+						'description'	=>	$this->input->post('r_brief'),
+						'content_type'	=>	$this->input->post('r_box')
+					);
+					$this->requests_model->UpdateRequestStatus($article_id,'request',$accept_data);
+					/// Assign reporters to request
+					if($this->input->post('r_reporter')) {
+						foreach ($this->input->post('r_reporter') as $reporter) {
+							$byline = $this->article_model->GetReporterByline($reporter);
+							$this->requests_model->AddUserToRequest($article_id, $reporter, $this->user_auth->entityId, ((isset($byline['id'])) ? $byline['id'] : NULL));
+						}
+					}
+					/// Create initial revision
+					$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, '', '', '', '', '', '');
+				}
+				$this->main_frame->AddMessage('success','New article ' . $data['status'] . ' created.');
+				redirect('/office/news/' . $article_id);
+			}
+		}
+
+		/// Validation errors occured
+		if ($this->validation->error_string != "") {
+			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $this->validation->error_string . '</ul>');
+		} elseif (count($errors) > 0) {
+			$temp_msg = '';
+			foreach ($errors as $error) {
+				$temp_msg .= '<li>' . $error . '</li>';
+			}
+			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $temp_msg . '</ul>');
+		}
+
+		/// Set up the main frame
+		$this->main_frame->SetContentSimple('office/news/request', $data);
+		/// Set page title & load main frame with view
+		$this->main_frame->SetTitleParameters(
+			array('action' => 'New', 'type' => $data['status'])
+		);
+
+		/// Load main frame
+		$this->main_frame->AddExtraHead('<link href="/stylesheets/calendar_select.css" rel="stylesheet" type="text/css" />');
+		$this->main_frame->Load();
+	}
+
+
+	/**
+	 *	@brief Create a new article without having to make a suggestion or request
+	 */
+	function create2()
+	{
+		/// Make sure users have necessary permissions to view this page
+		if (!CheckPermissions('office')) return;
+
+		/// Get changeable page content
+		$this->pages_model->SetPageCode('office_news_create');
+		/// Get page content
+		$data['boxes'] = $this->requests_model->getBoxes();
+		$data['user_level'] = 'editor';
+		$data['page_information'] = $this->pages_model->GetPropertyWikitext('page_information');
+		$data['status'] = 'article';
+
+		/// Perform validation checks on submitted data
+		$this->load->library('validation');
+		$this->validation->set_error_delimiters('<li>','</li>');
+		/// Validation rules
+		$rules['r_title'] = 'trim|required|xss_clean';
+		$fields['r_title'] = 'title';
+		$rules['r_brief'] = 'trim|required|xss_clean';
+		$fields['r_brief'] = 'brief';
+		$rules['r_box'] = 'trim|required|xss_clean';
+		$fields['r_box'] = 'box';
+		$rules['r_deadline'] = 'trim|required|numeric';
+		$fields['r_deadline'] = 'deadline';
+		$this->validation->set_rules($rules);
+		$this->validation->set_fields($fields);
+		/// Run validation checks, if they pass proceed to conduct db integrity checks
+		$errors = array();
+		if ($this->validation->run()) {
+			$deadline = NULL;
+			if ($this->input->post('r_deadline') < mktime()) {
+				$errors[] = 'Please select a deadline in the future';
+			} elseif ($this->input->post('r_deadline') > (mktime() + (60*60*24*365))) {
+				$errors[] = 'Please select a deadline within the next year';
+			} else {
+				$deadline = $this->input->post('r_deadline');
+			}
+			if (!$this->requests_model->isBox($this->input->post('r_box'))) {
+				$errors[] = 'Please select the box you wish the ' . $data['status'] . ' to be submitted to';
+			}
+
+			/// If no db integrity errors then save request
+			if (count($errors) == 0) {
+				if ($deadline != NULL) {
+					$deadline = date('Y-m-d H:i:s', $deadline);
+				}
+				$article_id = $this->requests_model->CreateRequest('request',$this->input->post('r_box'),$this->input->post('r_title'),$this->input->post('r_brief'),$this->user_auth->entityId,$deadline);
+
+				$byline = $this->article_model->GetReporterByline($this->user_auth->entityId);
+				$this->requests_model->AddUserToRequest($article_id, $this->user_auth->entityId, $this->user_auth->entityId, ((isset($byline['id'])) ? $byline['id'] : NULL));
+				$this->requests_model->AcceptRequest($article_id, $this->user_auth->entityId);
+				$accept_data = array(
+					'editor' 		=>	$this->user_auth->entityId,
+					'publish_date' 	=>	$deadline,
+					'title'			=>	$this->input->post('r_title'),
+					'description'	=>	$this->input->post('r_brief'),
+					'content_type'	=>	$this->input->post('r_box')
+				);
+				$this->requests_model->UpdateRequestStatus($article_id,'request',$accept_data);
+				$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, '', '', '', '', '', '');
+				$this->main_frame->AddMessage('success','New article ' . $data['status'] . ' created.');
+				redirect('/office/news/' . $article_id);
+			}
+		}
+
+		/// Validation errors occured
+		if ($this->validation->error_string != "") {
+			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $this->validation->error_string . '</ul>');
+		} elseif (count($errors) > 0) {
+			$temp_msg = '';
+			foreach ($errors as $error) {
+				$temp_msg .= '<li>' . $error . '</li>';
+			}
+			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $temp_msg . '</ul>');
+		}
+
+		/// Set up the main frame
+		$this->main_frame->SetContentSimple('office/news/create', $data);
+
+		/// Load main frame
+		$this->main_frame->AddExtraHead('<link href="/stylesheets/calendar_select.css" rel="stylesheet" type="text/css" />');
+		$this->main_frame->Load();
+	}
+
+
+
+
+
+
+
+
+
+
+
+
+
+	function _editRequest ($article_id,$data)
+	{
+
+		/// Get changeable page content
+		$this->pages_model->SetPageCode('office_news_request');
+		/// Get page content
+		$data['boxes'] = $this->requests_model->getBoxes();
+		/// @TODO: this needs to get reporters only part of the article type yorker sub-team
+		$data['reporters'] = $this->requests_model->getReporters();
+		$data['tasks_heading'] = $this->pages_model->GetPropertyText('news_office:tasks_heading', TRUE);
+		$data['status'] = 'request';
+
+		// Get different content based on access
+		if ($data['user_level'] == 'editor') {
+			$data['heading'] = $this->pages_model->GetPropertyText('heading_editor');
+			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro_editor');
+		} else {
+			$data['heading'] = $this->pages_model->GetPropertyText('heading');
+			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro');
+		}
+		$data['unassigned_requests'] = $this->pages_model->GetPropertyWikitext('unassigned_requests');
+		
+		$data['edit_enable'] = false;
+		if ($data['status'] == 'suggestion') {
+			$data['article'] = $this->requests_model->GetSuggestedArticle($article_id);
+			if (($data['user_level'] == 'editor') || ($data['article']['userid'] == $this->user_auth->entityId)) {
+				$data['edit_enable'] = true;
+			}
+		} elseif ($data['status'] == 'request') {
+			$data['article'] = $this->requests_model->GetRequestedArticle($article_id);
+			$data['assigned_reporters'] = $this->requests_model->GetWritersForArticle($article_id);
+			$data['isUserAssigned'] = $this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId);
+			if ($data['user_level'] == 'editor') {
+				$data['edit_enable'] = true;
+			}
+		}
+
+		// Perform validation checks on submitted data
+		$this->load->library('validation');
+		$this->validation->set_error_delimiters('<li>','</li>');
+		// Validation rules
+		$rules['r_title'] = 'trim|required|xss_clean';
+		$fields['r_title'] = 'title';
+		$rules['r_brief'] = 'trim|required|xss_clean';
+		$fields['r_brief'] = 'brief';
+		$rules['r_box'] = 'trim|required|xss_clean';
+		$fields['r_box'] = 'box';
+		if ($data['user_level'] == 'editor') {
+			$rules['r_deadline'] = 'trim|required|numeric';
+			$fields['r_deadline'] = 'deadline';
+			$rules['r_reporter'] = '';
+			$fields['r_reporter'] = 'reporter';
+		}
+		$this->validation->set_rules($rules);
+		$this->validation->set_fields($fields);
+		// Run validation checks, if they pass proceed to conduct db integrity checks
+		$errors = array();
+		if ($this->validation->run()) {
+			$deadline = NULL;
+			if ($data['user_level'] == 'editor') {
+				if ($this->input->post('r_deadline') < mktime()) {
+					$errors[] = 'Please select a deadline in the future';
+				} elseif ($this->input->post('r_deadline') > (mktime() + (60*60*24*365))) {
+					$errors[] = 'Please select a deadline within the next year';
+				} else {
+					$deadline = $this->input->post('r_deadline');
+				}
+				if($this->input->post('r_reporter')) {
+					$valid = true;
+					foreach ($this->input->post('r_reporter') as $reporter) {
+						if (!is_numeric($reporter)) {
+							$valid = false;
+						}
+					}
+					if ((!$valid) || (!$this->requests_model->reportersExist($this->input->post('r_reporter')))) {
+						$errors[] = 'Please choose the reporters you wish to assign the request to';
+					}
+				}
+			}
+			if (!$this->requests_model->isBox($this->input->post('r_box'))) {
+				$errors[] = 'Please select the box you wish the ' . $data['status'] . ' to be submitted to';
+			}
+
+			// If no db integrity errors then save request
+			if (count($errors) == 0) {
+				if ($deadline != NULL) {
+					$deadline = date('Y-m-d H:i:s', $deadline);
+				}
+				if ($data['status'] == 'request') {
+					if ($data['user_level'] == 'editor') {
+						$accept_data = array(
+							'editor' => $this->user_auth->entityId,
+							'publish_date' => $deadline,
+							'title' => $this->input->post('r_title'),
+							'description' => $this->input->post('r_brief'),
+							'content_type' => $this->input->post('r_box')
+						);
+						$this->requests_model->UpdateRequestStatus($article_id,'request',$accept_data);
+						$this->requests_model->RemoveAllUsersFromRequest($article_id);
+						if($this->input->post('r_reporter')) {
+							foreach ($this->input->post('r_reporter') as $reporter) {
+								$byline = $this->article_model->GetReporterByline($reporter);
+								$this->requests_model->AddUserToRequest($article_id, $reporter, $this->user_auth->entityId, ((isset($byline['id'])) ? $byline['id'] : NULL));
+								if ($data['live_content'] !== NULL) {
+									$this->requests_model->AcceptRequest($article_id, $reporter);
+								}
+							}
+						}
+						$this->main_frame->AddMessage('success','Request details saved.');
+					}
+				}
+				redirect('/office/news/' . $data['article']['id']);
+			}
+		}
+
+		// Validation errors occured
+		if ($this->validation->error_string != "") {
+			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $this->validation->error_string . '</ul>');
+		} elseif (count($errors) > 0) {
+			$temp_msg = '';
+			foreach ($errors as $error) {
+				$temp_msg .= '<li>' . $error . '</li>';
+			}
+			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $temp_msg . '</ul>');
+		} else {
+			// First time form has been loaded so populate fields
+			$this->validation->r_title = $data['article']['title'];
+			$this->validation->r_brief = $data['article']['description'];
+			$this->validation->r_box = $data['article']['box_name'];
+			if ($data['status'] == 'request') {
+				$this->validation->r_deadline = $data['article']['deadline'];
+			}
+		}
+
+		// Set up the main frame
+		$this->main_frame->SetContentSimple('office/news/edit_request', $data);
+		// Set page title & load main frame with view
+		$this->main_frame->SetTitleParameters(
+			array('action' => 'Edit', 'type' => $data['status'])
+		);
+		/// Load main frame
+		$this->main_frame->AddExtraHead('<link href="/stylesheets/calendar_select.css" rel="stylesheet" type="text/css" />');
+		$this->main_frame->Load();
+	}
+
+
+
+
+
+
+
+	/**
+	 *	@brief Mapping function for operations on a particular article id
+	 */
+	function article($article_id = 0)
+	{
+		/// Make sure users have necessary permissions to view this page
+		if (!CheckPermissions('office')) return;
+
+		/// Get article ID
+		if ($article_id == 0) {
+			if (is_numeric($this->uri->segment(4))) {
+				redirect('/office/news/' . $this->uri->segment(4));
+			} else {
+				redirect('/office/news');
+			}
+		} else {
+			/// Check article ID exists
+			if (is_numeric($article_id)) {
+				$article_info = $this->article_model->GetArticleHeader($article_id);
+				if ($article_info !== FALSE) {
+
+					/// Make it so we only have to worry about two levels of access as admins can do everything editors can
+					$data['user_level'] = GetUserLevel();
+					if ($data['user_level'] == 'admin') {
+						$data['user_level'] = 'editor';
+					}
+
+					// Quick way of adding photos to an article straight from the gallery
+					if (isset($_SESSION['img']) && (count($_SESSION['img']) > 0)) {
+						if (isset($_POST['add_photos'])) {
+							if (count($_POST['imgadd']) > 0) {
+								foreach ($_POST['imgadd'] as $photo) {
+									$photo_title = $_POST['img' . $photo . '_title'];
+									$photo_alt = $_POST['img' . $photo . '_alt'];
+									$photo_req_id = $this->photos_model->AddNewPhotoRequest($this->user_auth->entityId,$article_id,$photo_title,$photo_alt);
+									$this->photos_model->SuggestPhoto($photo_req_id,$photo,'Added to article straight from gallery.',$this->user_auth->entityId);
+									$this->photos_model->FlagRequestReady($photo_req_id);
+									$this->photos_model->SelectPhoto($photo_req_id,$photo,$this->user_auth->entityId);
+								}
+							}
+							unset($_SESSION['img']);
+							redirect('/office/news/' . $article_id);
+						} else {
+							$this->load->library('image');
+							$this->pages_model->SetPageCode('office_news_photo_suggest');
+							$this->main_frame->SetContentSimple('office/news/photo_suggest', $data);
+							$this->main_frame->SetTitleParameters(
+								array('title' => $article_info['requesttitle'])
+							);
+							$this->main_frame->Load();
+						}
+						return;
+					}
+
+					/// Determine what operation to perform
+					switch ($article_info['status']) {
+						case 'pulled':
+							$this->_showarticle($article_id);
+						case 'published':
+						case 'request':
+							if ($data['user_level'] == 'editor') {
+								/// If editor but also assigned reporter and not accepted then is reporter
+								if ($this->uri->segment(4,'') == 'edit') {
+									$this->_editRequest($article_id,$data);
+								} elseif ($this->input->post('publish') == 'Publish Article') {
+									$this->_publishArticle($article_id);
+								} else {
+									/// EDITOR: Changes + Pull + Change publish date
+									$this->_showarticle($article_id);
+								}
+							} else {
+								/// EVERYONE: View + Notice that already published
+								/// WTF is this here for? -> echo('This article is live, and cannot be edited except by an editor.');
+								$this->_showarticle($article_id);
+							}
+							break;
+						case 'suggestion':
+							$this->_editSuggestion($article_id,$data);
+							break;
+					}
+
+				} else {
+					redirect('/office/news');
+				}
+			} else {
+				redirect('/office/news');
+			}
+		}
+	}
+
+
+	/**
+	 *	@brief View/Edit suggestions
+	 */
+	function _editSuggestion ($article_id, $data)
+	{
+		/// Get changeable page content
+		$this->pages_model->SetPageCode('office_news_request');
+		/// Get page content
+		$data['boxes'] = $this->requests_model->getBoxes();
+		/// @TODO: this needs to get reporters only part of the article type yorker sub-team
+		$data['reporters'] = $this->requests_model->getReporters();
+		$data['tasks_heading'] = $this->pages_model->GetPropertyText('news_office:tasks_heading', TRUE);
+		$data['status'] = 'suggestion';
+
+		/// Get different content based on access
+		if ($data['user_level'] == 'editor') {
+			$data['heading'] = $this->pages_model->GetPropertyText('heading_editor');
+			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro_editor');
+		} else {
+			$data['heading'] = $this->pages_model->GetPropertyText('heading');
+			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro');
+		}
+
+		/// Determine if current user can edit suggestion details
+		$data['edit_enable'] = false;
+		$data['article'] = $this->requests_model->GetSuggestedArticle($article_id);
+		if (($data['user_level'] == 'editor') || ($data['article']['userid'] == $this->user_auth->entityId)) {
+			$data['edit_enable'] = true;
+		}
+
+		/// Perform validation checks on submitted data
+		$this->load->library('validation');
+		$this->validation->set_error_delimiters('<li>','</li>');
+		/// Validation rules
+		$rules['r_title'] = 'trim|required|xss_clean';
+		$fields['r_title'] = 'title';
+		$rules['r_brief'] = 'trim|required|xss_clean';
+		$fields['r_brief'] = 'brief';
+		$rules['r_box'] = 'trim|required|xss_clean';
+		$fields['r_box'] = 'box';
+		if ($data['user_level'] == 'editor') {
+			$rules['r_deadline'] = 'trim|required|numeric';
+			$fields['r_deadline'] = 'deadline';
+			$rules['r_reporter'] = '';
+			$fields['r_reporter'] = 'reporter';
+		}
+		$this->validation->set_rules($rules);
+		$this->validation->set_fields($fields);
+		/// Run validation checks, if they pass proceed to conduct db integrity checks
+		$errors = array();
+		if ($this->validation->run()) {
+			$deadline = NULL;
+			if ($data['user_level'] == 'editor') {
+				if ($this->input->post('r_deadline') < mktime()) {
+					$errors[] = 'Please select a deadline in the future';
+				} elseif ($this->input->post('r_deadline') > (mktime() + (60*60*24*365))) {
+					$errors[] = 'Please select a deadline within the next year';
+				} else {
+					$deadline = $this->input->post('r_deadline');
+				}
+				if($this->input->post('r_reporter')) {
+					$valid = true;
+					foreach ($this->input->post('r_reporter') as $reporter) {
+						if (!is_numeric($reporter)) {
+							$valid = false;
+						}
+					}
+					if ((!$valid) || (!$this->requests_model->reportersExist($this->input->post('r_reporter')))) {
+						$errors[] = 'Please choose the reporters you wish to assign the request to';
+					}
+				}
+			}
+			if (!$this->requests_model->isBox($this->input->post('r_box'))) {
+				$errors[] = 'Please select the box you wish the suggestion to be submitted to';
+			}
+
+			/// If no db integrity errors then save request
+			if (count($errors) == 0) {
+				if ($deadline != NULL) {
+					$deadline = date('Y-m-d H:i:s', $deadline);
+				}
+				if ($data['user_level'] == 'editor') {
+					if ($this->input->post('accept') == 'Accept') {
+						$accept_data = array(
+							'editor' => $this->user_auth->entityId,
+							'publish_date' => $deadline,
+							'title' => $this->input->post('r_title'),
+							'description' => $this->input->post('r_brief'),
+							'content_type' => $this->input->post('r_box')
+						);
+						$this->requests_model->UpdateRequestStatus($article_id,'request',$accept_data);
+						if($this->input->post('r_reporter')) {
+							foreach ($this->input->post('r_reporter') as $reporter) {
+								$byline = $this->article_model->GetReporterByline($reporter);
+								$this->requests_model->AddUserToRequest($article_id, $reporter, $this->user_auth->entityId, ((isset($byline['id'])) ? $byline['id'] : NULL));
+							}
+						}
+						$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, '', '', '', '', '', '');
+						$this->main_frame->AddMessage('success','Suggestion accepted and request generated.');
+					} else {
+						$this->requests_model->RejectSuggestion($article_id);
+						$this->main_frame->AddMessage('success','Suggestion successfully rejected.');
+					}
+				} else {
+					$this->requests_model->UpdateSuggestion($article_id,array('title' => $this->input->post('r_title'), 'description' => $this->input->post('r_brief'), 'content_type' => $this->input->post('r_box')));
+					$this->main_frame->AddMessage('success','Suggestion details saved.');
+				}
+				redirect('/office/news/' . $article_id);
+			}
+		}
+
+		/// Validation errors occured
+		if ($this->validation->error_string != "") {
+			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $this->validation->error_string . '</ul>');
+		} elseif (count($errors) > 0) {
+			$temp_msg = '';
+			foreach ($errors as $error) {
+				$temp_msg .= '<li>' . $error . '</li>';
+			}
+			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $temp_msg . '</ul>');
+		} else {
+			/// First time form has been loaded so populate fields
+			$this->validation->r_title = $data['article']['title'];
+			$this->validation->r_brief = $data['article']['description'];
+			$this->validation->r_box = $data['article']['box_codename'];
+			if ($data['status'] == 'request') {
+				$this->validation->r_deadline = $data['article']['deadline'];
+			}
+		}
+
+		/// Set up the main frame
+		$this->main_frame->SetContentSimple('office/news/edit_request', $data);
+		/// Set page title & load main frame with view
+		$this->main_frame->SetTitleParameters(
+			array('action' => 'Edit', 'type' => 'request')
+		);
+
+		/// Load main frame
+		$this->main_frame->AddExtraHead('<link href="/stylesheets/calendar_select.css" rel="stylesheet" type="text/css" />');
+		$this->main_frame->Load();
+	}
+
+
+	/**
+	 *	@brief Publish an article either setting a date for it to go live or adding it to the article pool
+	 */
+	function _publishArticle($article_id)
+	{
+		// Make it so we only have to worry about two levels of access as admins can do everything editors can
+		$data['user_level'] = GetUserLevel();
+		if ($data['user_level'] == 'admin') {
+			$data['user_level'] = 'editor';
+		}
+		$data['article'] = $this->article_model->GetArticleDetails($article_id);
+		if (count($data['article']) == 0) {
+			$this->main_frame->AddMessage('error','The article you requested to publish does not exist, please try again.');
+			redirect('/office/news/');
+		} elseif ($data['user_level'] != 'editor') {
+			$this->main_frame->AddMessage('error','Only editors may publish articles.');
+			redirect('/office/news/' . $article_id);
+		} else {
+			/// Get revision to publish
+			/// @TODO: Allow specifying of revision to publish
+			$revision_id = $this->article_model->GetLatestRevision($article_id);
+			$data['revision_data'] = $this->article_model->GetRevisionData($revision_id);
+
+			$errors = array();
+			if ($data['revision_data']['headline'] == '') {
+				$errors[] = 'Headline not specified.';
+			}
+			if ($data['revision_data']['blurb'] == '') {
+				$errors[] = 'Blurb not specified.';
+			}
+			$reporter_check = FALSE;
+			foreach ($data['article']['reporters'] as $reporter) {
+				if ($reporter['status'] == 'accepted') {
+					$reporter['bcard'] = $this->article_model->GetReporterByline($reporter['id']);
+					if (count($reporter['bcard']) > 0) {
+						$reporter_check = TRUE;
+					} else {
+						$reporter_check = FALSE;
+						break;
+					}
+				}
+			}
+			if (!$reporter_check) {
+				$errors[] = 'At least one reporter must be assigned and have accepted to write this article. All reporters must have a business card also.';
+			}
+			$photo_requests = $this->photos_model->GetPhotoRequestsForArticle($article_id);
+			$photo_all_completed = TRUE;
+			$photo_thumbnail = FALSE;
+			foreach ($photo_requests as $photo) {
+				if (($photo['status'] != 'completed') && ($photo['status'] != 'deleted')) {
+					$photo_all_completed = FALSE;
+				} elseif (($photo['status'] == 'completed') && ($photo['photo_number'] == $data['article']['photo_thumbnail'])) {
+					$photo_thumbnail = TRUE;
+				}
+			}
+			if ($data['article']['photo_thumbnail'] === NULL) {
+				$errors[] = 'Photo to use for article thumbnails not selected.';
+			}
+			if (!$photo_all_completed) {
+				$errors[] = 'All photo requests must have either been completed or cancelled.';
+			}
+			if (!$photo_thumbnail) {
+				$errors[] = 'The photo request that has been set to use for thumbnails must be completed.';
+			}
+			$data['errors'] = $errors;
+
+			/// @TODO: Allow adding to article pool
+			if (($this->input->post('confirm_publish') == 'Publish') && (count($errors) == 0)) {
+				if (!is_numeric($this->input->post('r_publish'))) {
+					$this->main_frame->AddMessage('error','Please select a date and time to publish the article.');
+//				} elseif ($this->input->post('r_publish') < mktime()) {
+//					$this->main_frame->AddMessage('error','Please select a publish date in the future.');
+				} elseif ($this->input->post('r_publish') > (mktime() + (60*60*24*365))) {
+					$this->main_frame->AddMessage('error','Please select a publish date within the next year.');
+				} else {
+					$publish_date = date('Y-m-d H:i:s', $this->input->post('r_publish'));
+					$this->requests_model->PublishArticle($article_id,$revision_id,$publish_date);
+					$this->load->library('facebook_ticker');
+					if ($this->facebook_ticker->TickerUpdate()) {
+						$this->main_frame->AddMessage('success','The Yorker Facebook News Ticker Application was successfully updated.');
+					} else {
+						$this->main_frame->AddMessage('error','There was a problem updating The Yorker Facebook News Ticker Application.');
+					}
+					$this->main_frame->AddMessage('success','The article was successfully published.');
+					redirect('/office/news');
+				}
+			}
+
+			// Get page content
+			$this->pages_model->SetPageCode('office_news_publish');
+			$data['heading'] = $this->pages_model->GetPropertyText('heading');
+			$data['intro_text'] = $this->pages_model->GetPropertyWikitext('intro_text');
+
+			// Set up the main frame
+			$this->main_frame->SetContentSimple('office/news/publish', $data);
+			$this->main_frame->AddExtraHead('<link href="/stylesheets/calendar_select.css" rel="stylesheet" type="text/css" />');
+			// Set page title & load main frame with view
+			$this->main_frame->SetTitleParameters(
+				array('title' => $data['article']['request_title'])
+			);
+			$this->main_frame->Load();
+		}
+	}
+
+
+
+
+
+
+
+
+
+	function _showarticle($article_id = 0)
+	{
+		$this->load->library('image');
+		$data['article'] = $this->article_model->GetArticleDetails($article_id);
+
+		if (count($data['article']) > 0) {
+			// Get photo requests for article
+			$data['photo_requests'] = $this->photos_model->GetPhotoRequestsForArticle($article_id);
+			// Is user requested for this article? i.e. can edit
+			$data['user_requested'] = $this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId);
+			// Show or hide accept/decline request buttons
+			$data['user_requested'] = ($data['user_requested'] == 'requested');
+
+			// Make it so we only have to worry about two levels of access as admins can do everything editors can
+			$data['user_level'] = GetUserLevel();
+			if ($data['user_level'] == 'admin') {
+				$data['user_level'] = 'editor';
+			}
+
+			if ($data['user_requested']) {
+				if ($this->input->post('accept') == 'Accept Request') {
+					$this->requests_model->AcceptRequest($article_id, $this->user_auth->entityId);
+					$this->main_frame->AddMessage('success','Article request accepted.');
+					redirect('/office/news/' . $article_id);
+				} elseif ($this->input->post('decline') == 'Decline Request') {
+					$this->requests_model->DeclineRequest($article_id, $this->user_auth->entityId);
+					$this->main_frame->AddMessage('success','Article request declined.');
+					redirect('/office/news/' . $article_id);
+				}
+			 }
+
+			// Setup XAJAX functions
+			$this->load->library('xajax');
+	        $this->xajax->registerFunction(array('_addComment', &$this, '_addComment'));
+	        $this->xajax->registerFunction(array('_updateHeadlines', &$this, '_updateHeadlines'));
+	        $this->xajax->registerFunction(array('_newFactbox', &$this, '_newFactbox'));
+	        $this->xajax->registerFunction(array('_removeFactBox', &$this, '_removeFactBox'));
+	        $this->xajax->registerFunction(array('_newPhoto', &$this, '_newPhoto'));
+	        $this->xajax->registerFunction(array('_updatePhoto', &$this, '_updatePhoto'));
+	        $this->xajax->registerFunction(array('_deleteArticle', &$this, '_deleteArticle'));
+	        $this->xajax->registerFunction(array('_getMediaFiles', &$this, '_getMediaFiles'));
+	        $this->xajax->processRequests();
+
+			// Create menu
+			$navbar = $this->main_frame->GetNavbar();
+			$navbar->AddItem('request', 'request', 'javascript:tabs(\'request\');');
+			$navbar->AddItem('article', 'body', 'javascript:tabs(\'article\');');
+			//$navbar->AddItem('sidebar', 'sidebar', 'javascript:tabs(\'sidebar\');');
+			$navbar->AddItem('comments', 'comments', 'javascript:tabs(\'comments\');');
+			$navbar->AddItem('revisions', 'revisions', 'javascript:tabs(\'revisions\');');
+			$navbar->SetSelected('request');
+
+			// Get page content
+			$this->pages_model->SetPageCode('office_news_article');
+			$data['request_heading'] = $this->pages_model->GetPropertyText('request_heading');
+
+			/// @todo jh559,cdt502 ajaxify comments
+			$this->load->library('comment_views');
+			$thread = $this->news_model->GetPrivateThread($article_id);
+			$this->comment_views->SetUri('/office/news/'.$article_id.'/');
+			/// @todo jh559,cdt502 comment pages (page hardwired to 1 atm)
+			$data['comments'] = $this->comment_views->CreateStandard($thread, /* included comment */ 0);
+
+			$data['revisions'] = $this->requests_model->GetArticleRevisions($article_id);
+			$revision = $this->article_model->GetLatestRevision($article_id);
+			if (!$revision) {
+				// There is no revision for this article yet... so create one
+				$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, '', '', '', '', '', '');
+			}
+			// Get latest revision's data
+			$data['revision'] = $this->article_model->GetRevisionData($revision);
+
+			// Set up the main frame
+			$this->main_frame->SetContentSimple('office/news/article', $data);
+			$this->main_frame->SetExtraHead($this->xajax->getJavascript(null, '/javascript/xajax.js'));
+			$this->main_frame->IncludeJs('javascript/wikitoolbar.js');
+			// Set page title & load main frame with view
+			$this->main_frame->SetTitleParameters(
+				array('title' => $data['article']['request_title'])
+			);
+			$this->main_frame->Load();
+		}
+	}
+
+	function preview()
+	{
+		if (!CheckPermissions('office')) return;
+
+		$_SESSION['office_news_preview'] = $this->uri->segment(6);
+		redirect('/news/' . $this->uri->segment(5) . '/' . $this->uri->segment(4));
+	}
+
+
+
+	function _deleteArticle()
+	{
+		$xajax_response = new xajaxResponse();
+		$article_id = $this->uri->segment(3);
+		$data['article'] = $this->article_model->GetArticleDetails($article_id);
+
+		// Make it so we only have to worry about two levels of access as admins can do everything editors can
+		$data['user_level'] = GetUserLevel();
+		if ($data['user_level'] == 'admin') {
+			$data['user_level'] = 'editor';
+		}
+//		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
+		if ($data['user_level'] == 'editor') {
+			$this->requests_model->DeleteArticle($article_id);
+			$this->main_frame->AddMessage('success','The article was successfully deleted.');
+			$xajax_response->addRedirect('/office/news');
+		} else {
+			$xajax_response->addAlert('You must be an editor to delete an article!');
+		}
+		return $xajax_response;
+	}
+
+
+	function _getMediaFiles()
+	{
+		$xajax_response = new xajaxResponse();
+		$this->load->model('static_model');
+		$exts = array('flv', 'mp3');
+		$options = array();
+		foreach ($this->static_model->GetDirectoryListing($this->config->item('static_local_path') . '/media', '', $exts) as $option) {
+			$options[] = array(
+				$option,
+				$this->config->item('static_web_address') . '/media' . $option
+			);
+		}
+		$xajax_response->addScriptCall('insertMediaPlayerOptions', $options);
+		return $xajax_response;
+	}
+
+
+	function _newPhoto($title,$description)
+	{
+		$this->load->library('image');
+		$xajax_response = new xajaxResponse();
+		$article_id = $this->uri->segment(3);
+		$data['article'] = $this->article_model->GetArticleDetails($article_id);
+
+		// Make it so we only have to worry about two levels of access as admins can do everything editors can
+		$data['user_level'] = GetUserLevel();
+		if ($data['user_level'] == 'admin') {
+			$data['user_level'] = 'editor';
+		}
+		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
+			$this->photos_model->AddNewPhotoRequest($this->user_auth->entityId,$article_id,$title,$description);
+
+			$photo_requests = $this->photos_model->GetPhotoRequestsForArticle($article_id);
+			foreach ($photo_requests as $photo) {
+				$main = 0;
+				$thumb = 0;
+				if ($data['article']['photo_main'] == $photo['photo_number']) {
+					$main = 1;
+				}
+				if ($data['article']['photo_thumbnail'] == $photo['photo_number']) {
+					$thumb = 1;
+				}
+				$xajax_response->addScriptCall('photo_created','/photos/small/'.$photo['chosen_photo'],$photo['id'],$photo['title'],date('d/m/y H:i', $photo['time']),$photo['photo_number'],$main,$thumb);
+			}
+		} else {
+			$xajax_response->addAlert('You do not have the permissions required to add a photo request for this article!');
+		}
+		return $xajax_response;
+	}
+
+	function _updatePhoto($photo_number,$image_operation)
+	{
+		$this->load->library('image');
+		$xajax_response = new xajaxResponse();
+		$article_id = $this->uri->segment(3);
+		$data['article'] = $this->article_model->GetArticleDetails($article_id);
+
+		// Make it so we only have to worry about two levels of access as admins can do everything editors can
+		$data['user_level'] = GetUserLevel();
+		if ($data['user_level'] == 'admin') {
+			$data['user_level'] = 'editor';
+		}
+		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
+			if ($image_operation == 'main') {
+				$this->photos_model->SetArticleMainPhoto($article_id,$photo_number);
+				$data['article']['photo_main'] = $photo_number;
+			} elseif ($image_operation == 'thumbnail') {
+				$this->photos_model->SetArticleThumbnailPhoto($article_id,$photo_number);
+				$data['article']['photo_thumbnail'] = $photo_number;
+			}
+
+			$photo_requests = $this->photos_model->GetPhotoRequestsForArticle($article_id);
+			foreach ($photo_requests as $photo) {
+				$main = 0;
+				$thumb = 0;
+				if ($data['article']['photo_main'] == $photo['photo_number']) {
+					$main = 1;
+				}
+				if ($data['article']['photo_thumbnail'] == $photo['photo_number']) {
+					$thumb = 1;
+				}
+				$xajax_response->addScriptCall('photo_created','/photos/small/'.$photo['chosen_photo'],$photo['id'],$photo['title'],date('d/m/y H:i', $photo['time']),$photo['photo_number'],$main,$thumb);
+			}
+		} else {
+			$xajax_response->addAlert('You do not have the permissions required to edit photo requests for this article!');
+		}
+		return $xajax_response;
+	}
+
+	function _newFactbox($revision,$title,$text)
+	{
+		$xajax_response = new xajaxResponse();
+		$article_id = $this->uri->segment(3);
+		// Make it so we only have to worry about two levels of access as admins can do everything editors can
+		$data['user_level'] = GetUserLevel();
+		if ($data['user_level'] == 'admin') {
+			$data['user_level'] = 'editor';
+		}
+		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
+			if (is_numeric($revision)) {
+				$title = addslashes($this->input->xss_clean($title));
+				$text = addslashes($this->input->xss_clean($text));
+				if ($revision == 0) {
+					$xajax_response->addScriptCall('factbox_created',0);
+				} else {
+					$fact_box_id = $this->article_model->InsertFactBox($revision, $title, $text);
+					$xajax_response->addScriptCall('factbox_created',1);
+				}
+			 } else {
+				$xajax_response->addAlert('Invalid revision number, please try reloading the page.');
+			 }
+		} else {
+			$xajax_response->addAlert('You do not have the permissions required to edit the details for this article!');
+		}
+		return $xajax_response;
+	}
+
+	function _removeFactBox($revision)
+	{
+		$xajax_response = new xajaxResponse();
+		// Make it so we only have to worry about two levels of access as admins can do everything editors can
+		$data['user_level'] = GetUserLevel();
+		if ($data['user_level'] == 'admin') {
+			$data['user_level'] = 'editor';
+		}
+		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
+			if (is_numeric($revision)) {
+				$this->article_model->DeleteRevisionFactBox($revision);
+				$xajax_response->addScriptCall('factbox_deleted');
+			 } else {
+				$xajax_response->addAlert('Invalid revision number, please try reloading the page.');
+			 }
+		} else {
+			$xajax_response->addAlert('You do not have the permissions required to edit the details for this article!');
+		}
+		return $xajax_response;
+	}
+
+	function _updateHeadlines($revision,$headline,$subheadline,$subtext,$blurb,$wiki,$create_cache,$fact_heading,$fact_text)
+	{
+		$this->load->library('image');
+		$xajax_response = new xajaxResponse();
+		$article_id = $this->uri->segment(3);
+		// Make it so we only have to worry about two levels of access as admins can do everything editors can
+		$data['user_level'] = GetUserLevel();
+		if ($data['user_level'] == 'admin') {
+			$data['user_level'] = 'editor';
+		}
+		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
+			if (is_numeric($revision)) {
+				$headline = $this->input->xss_clean($headline);
+				$subheadline = $this->input->xss_clean($subheadline);
+				$subtext = $this->input->xss_clean($subtext);
+				$blurb = $this->input->xss_clean($blurb);
+				$wiki = $this->input->xss_clean($wiki);
+				$fact_heading = $this->input->xss_clean($fact_heading);
+				$fact_text = $this->input->xss_clean($fact_text);
+				$revision = $this->article_model->GetArticleRevisionToEdit($article_id, $this->user_auth->entityId, $revision);
+				$wiki_cache = '';
+//				if ($create_cache) {
+					$this->load->library('wikiparser');
+					$data['photo_requests'] = $this->photos_model->GetPhotoRequestsForArticle($article_id);
+					foreach ($data['photo_requests'] as $photo) {
+						$this->wikiparser->add_image_override($photo['photo_number'], $this->image->getThumb($photo['chosen_photo'], 'medium', true), $photo['title']);
+					}
+					$wiki_cache = $this->wikiparser->parse($wiki);
+//				}
+				if ($revision == 0) {
+					$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, $headline, $subheadline, $subtext, $blurb, $wiki, $wiki_cache);
+				} else {
+					$this->article_model->UpdateRevision($revision,$headline,$subheadline,$subtext,$blurb,$wiki,$wiki_cache);
+				}
+				$this->article_model->UpdateRevisionFactBox($revision, $fact_heading, $fact_text);
+				$xajax_response->addScriptCall('headlinesUpdates',$revision,date('H:i:s'));
+			 } else {
+				$xajax_response->addAlert('Invalid revision number, please try reloading the page.');
+			 }
+		} else {
+			$xajax_response->addAlert('You do not have the permissions required to edit the details for this article!');
+		}
+		return $xajax_response;
+	}
+
+	function _addComment($comment_text)
+	{
+		$xajax_response = new xajaxResponse();
+		if ($comment_text == '') {
+			$xajax_response->addAlert('Please enter a comment to submit.');
+			$xajax_response->addScriptCall('commentAdded','','','');
+		} else {
+			$new_comment = $this->article_model->InsertArticleComment($this->uri->segment(3), $this->user_auth->entityId, $comment_text);
+			$xajax_response->addScriptCall('commentAdded',date('D jS F Y @ H:i',$new_comment['time']),$new_comment['name'],nl2br($comment_text));
+		}
+		return $xajax_response;
+	}
+
+}
+
+?>
Index: system/application/models/article_model.php
===================================================================
--- system/application/models/article_model.php (revision bb5b5eb67ad7b5cf111154a653ccef1deee3bb0e)
+++ system/application/models/article_model.php (revision d632b05df9693655807d0646c18519a707b62454)
@@ -1,11 +1,11 @@
 <?php
 /**
- * This model should add articles to the database. NOT yet complete.
- *
- * @author Alex Fargus (agf501)
- * @author Richard Ingle (ri504)
- *@author Owen Jones (oj502) -- The article_types stuff
- *
+ *	@brief	Office operations on articles
+ *	@author	Alex Fargus (agf501)
+ *	@author	Richard Ingle (ri504)
+ *	@author	Owen Jones (oj502) -- The article_types stuff
+ *	@author	Chris Travis (cdt502 - ctravis@gmail.com) -- Article Manager
  */
+
 class Article_model extends Model
 {
@@ -13,8 +13,141 @@
 	function __construct()
 	{
-		// Call the Model Constructor
 		parent::Model();
-		$this->load->library('wikiparser');
-	}
+	}
+
+	/**
+	 *	ARTICLE MANAGER (v2.0)
+	 */
+
+	function getById ($article_id = NULL)
+	{
+		$article = array();
+		if (empty($article_id)) return $article;
+
+		$sql = 'SELECT		a.article_id AS id,
+							a.article_content_type_id AS type_id,
+							content_types.content_type_codename AS type_codename,
+							content_types.content_type_name AS type_name,
+							content_types.content_type_section AS type_section,
+							a.article_organisation_entity_id AS org_id,
+							organisations.organisation_name AS org_name,
+							UNIX_TIMESTAMP(a.article_created) AS date_created,
+							UNIX_TIMESTAMP(a.article_deadline_date) AS date_deadline,
+							UNIX_TIMESTAMP(a.article_publish_date) AS date_published,
+							a.article_hits AS hits,
+							a.article_request_title AS request_title,
+							a.article_request_description AS request_description,
+							a.article_suggestion_accepted AS request_accepted,
+							a.article_request_entity_id AS creator_user_id,
+							CONCAT(creator.user_firstname, " ", creator.user_surname) AS creator_name,
+							a.article_editor_approved_user_entity_id AS editor_user_id,
+							CONCAT(editor.user_firstname, " ", editor.user_surname) AS editor_name,
+							a.article_pulled AS pulled,
+							a.article_ready AS ready,
+							a.article_deleted AS deleted,
+							a.article_thumbnail_photo_id AS thumbnail_photo_id,
+							a.article_main_photo_id AS main_photo_id,
+							a.article_private_comment_thread_id AS comment_thread_private_id,
+							a.article_public_comment_thread_id AS comment_thread_public_id,
+							a.article_liveblog AS liveblog,
+							a.article_live_content_id AS content_id
+				FROM		articles AS a
+				LEFT JOIN	content_types
+					ON		a.article_content_type_id = content_types.content_type_id
+				LEFT JOIN	organisations
+					ON		a.article_organisation_entity_id = organisations.organisation_entity_id
+				INNER JOIN	users AS creator
+					ON		a.article_request_entity_id = creator.user_entity_id
+				LEFT JOIN	users AS editor
+					ON		a.article_editor_approved_user_entity_id = editor.user_entity_id
+				WHERE		a.article_id = ?';
+		$query = $this->db->query($sql, array($article_id));
+		if ($query->num_rows() == 1) {
+			$article = $query->row_array();
+			$article['status'] = $this->getStatus($article);
+
+			// Article Contents
+			$sql = 'SELECT		article_content_id AS content_id,
+								article_content_last_author_user_entity_id AS content_user_id,
+								UNIX_TIMESTAMP(article_content_last_author_timestamp) AS content_updated,
+								article_content_heading AS content_heading,
+								article_content_subtext AS content_subtext,
+								article_content_wikitext AS content_wikitext,
+								article_content_blurb AS content_blurb
+					FROM		article_contents
+					WHERE		article_content_article_id = ?
+					ORDER BY	article_content_last_author_timestamp DESC
+					LIMIT		0, 1';
+			$query = $this->db->query($sql, array($article['id']));
+			if ($query->num_rows() == 1) {
+				$article = array_merge($article, $query->row_array());
+			}
+			
+			// Date formats
+			$this->load->library('academic_calendar');
+			$created = $this->academic_calendar->Timestamp($article['date_created']);
+			$article['date_created_academic'] = $created->Format('D') . ' / ' . $created->AcademicWeek() . ' / ' . ucfirst($created->AcademicTermNameUnique());
+			$article['date_created_full'] = $created->Format('D jS F Y @ H:i');
+			if ($article['date_deadline'] !== null) {
+				$deadline = $this->academic_calendar->Timestamp($article['date_deadline']);
+				$article['date_deadline_academic'] = $deadline->Format('D') . ' / ' . $deadline->AcademicWeek() . ' / ' . ucfirst($deadline->AcademicTermNameUnique());
+				$article['date_deadline_full'] = $deadline->Format('D jS F Y @ H:i');
+			} else {
+				$article['date_deadline_academic'] = '';
+				$article['date_deadline_full'] = '';
+			}
+			if ($article['date_published'] !== null) {
+				$publish = $this->academic_calendar->Timestamp($article['date_published']);
+				$article['date_published_academic'] = $publish->Format('D') . ' / ' . $publish->AcademicWeek() . ' / ' . ucfirst($publish->AcademicTermNameUnique());
+				$article['date_published_full'] = $publish->Format('D jS F Y @ H:i');
+			} else {
+				$article['date_published_academic'] = '';
+				$article['date_published_full'] = '';
+			}
+		}
+
+		// Comments
+
+		return $article;
+	}
+
+	function getStatus ($article)
+	{
+		if ($article['deleted']) {
+			return 'DELETED';
+		} elseif ($article['pulled']) {
+			return 'PULLED';
+		} elseif (($article['content_id'] !== NULL) && ($article['date_published'] <= mktime())) {
+			return 'LIVE';
+		} elseif ($article['content_id'] !== NULL) {
+			return 'SCHEDULED';
+		} elseif ($article['ready']) {
+			return 'READY';
+		} elseif ($article['request_accepted']) {
+			return 'REQUEST';
+		} else {
+			return 'SUGGESTION';
+		}
+	}
+
+	function getAllContentTypes ()
+	{
+		$sql = 'SELECT		content_type_id AS id,
+							content_type_codename AS codename,
+							content_type_name AS name,
+							content_type_section AS section
+				FROM		content_types
+				WHERE		content_type_section != "hardcoded"
+				ORDER BY	content_type_section ASC,
+							content_type_section_order ASC';
+		$query = $this->db->query($sql);
+		return $query->result_array();
+	}
+
+	/**
+	 *	END ARTICLE MANAGER (v2.0)
+	 */
+
+
 
 	/// Retrieves all the information for a reporter's byline
@@ -212,4 +345,5 @@
 	{
 	$this->db->trans_start();
+	$this->load->library('wikiparser');
 	$wiki_cache = $this->wikiparser->parse($wikitext);
 	$sql = 'INSERT INTO articles (
@@ -369,4 +503,5 @@
 	function InsertFactBox($article_content_id, $title = "", $wikitext = "")
 	{
+		$this->load->library('wikiparser');
 		$wiki_cache = $this->wikiparser->parse($wikitext);
 		$sql = 'INSERT INTO fact_boxes (
@@ -386,4 +521,5 @@
 	function UpdateRevisionFactBox ($revision, $title, $text)
 	{
+		$this->load->library('wikiparser');
 		$wiki_cache = $this->wikiparser->parse($text);
 		$sql = 'UPDATE fact_boxes
Index: system/application/models/photos_model.php
===================================================================
--- system/application/models/photos_model.php (revision c3005e95c259c606958d9d3f4575f3bb4e4ec38d)
+++ system/application/models/photos_model.php (revision d632b05df9693655807d0646c18519a707b62454)
@@ -380,18 +380,29 @@
 	}
 
+	function GetThumbnailTypes ()
+	{
+		$sql = 'SELECT		image_type_id AS id,
+							image_type_name AS name
+				FROM		image_types
+				WHERE		image_type_photo_thumbnail = 1
+				ORDER BY	image_type_width ASC,
+							image_type_height ASC';
+		$query = $this->db->query($sql);
+		return $query->result_array();
+	}
+
 	function GetPhotoRequestsForArticle($article_id)
 	{
-		$result = array();
-		$sql = 'SELECT		photo_requests.photo_request_id
+		$sql = 'SELECT		photo_request_id AS request_id,
+							photo_request_relative_photo_number AS photo_number,
+							photo_request_chosen_photo_id AS photo_id,
+							photo_request_image_type_id AS photo_type,
+							photo_request_title AS photo_caption,
+							photo_request_description AS photo_alt
 				FROM		photo_requests
-				WHERE		photo_requests.photo_request_article_id = ?
-				ORDER BY	photo_requests.photo_request_relative_photo_number ASC';
-		$query = $this->db->query($sql,array($article_id));
-		if ($query->num_rows() > 0) {
-			foreach ($query->result() as $row) {
-				$result[] = $this->GetPhotoRequestDetails($row->photo_request_id);
-			}
-		}
-		return $result;
+				WHERE		photo_request_article_id = ?
+				ORDER BY	photo_request_relative_photo_number ASC';
+		$query = $this->db->query($sql, array($article_id));
+		return $query->result_array();
 	}
 
Index: system/application/views/office/article/main.php
===================================================================
--- system/application/views/office/article/main.php (revision d632b05df9693655807d0646c18519a707b62454)
+++ system/application/views/office/article/main.php (revision d632b05df9693655807d0646c18519a707b62454)
@@ -0,0 +1,135 @@
+<script type="text/javascript">
+setStartPage('<?php echo($start_page); ?>');
+setData(<?php echo($articleJS); ?>);
+onLoadFunctions.push(loadPage);
+</script>
+
+<div id="office_container">
+	<div id="office_sidebar">
+		<ul id="office_nav">
+			<li id="nav_brief"><a href="#" onclick="return switchPage('brief');">Brief</a></li>
+			<li id="nav_article"><a href="#" onclick="return switchPage('article');">Content</a></li>
+			<li id="nav_photos"><a href="#" onclick="return switchPage('photos');">Photos</a></li>
+			<li id="nav_bylines"><a href="#" onclick="return switchPage('bylines');">Bylines</a></li>
+			<li id="nav_related"><a href="#" onclick="return switchPage('related');">Related Articles</a></li>
+			<li id="nav_comments"><a href="#" onclick="return switchPage('comments');">Comments</a></li>
+			<li id="nav_publish"><a href="#" onclick="return switchPage('publish');">Publish</a></li>
+		</ul>
+	</div>
+
+	<div id="office_canvas">
+		<div id="office_pages">
+
+			<div class="office_page" id="page_brief">
+				<div class="actions">
+					<a href="/office/organisation">
+						<img src="/images/version2/office/button_organisation.png" alt="Organisation Chart" />
+					</a>
+				</div>
+
+				<img src="/images/version2/office/icon_announcements.png" alt="Article Brief" class="title" />
+				<h2>Article Brief</h2>
+
+				<label for="article_request_title">Title:</label>
+				<input type="text" name="article_request_title" id="article_request_title" value="" size="40" class="heading" />
+				<br />
+				<label for="article_request_description">Brief:</label>
+				<textarea name="article_request_description" id="article_request_description" rows="5" cols="50"></textarea>
+				<br />
+				<label for="article_type_id">Type:</label>
+				<select name="article_type_id" id="article_type_id">
+					<option value="-1">-</option>
+					<?php foreach ($types as $type) { ?>
+					<option value="<?php echo($type['id']); ?>"><?php echo(ucfirst($type['section']) . ' - ' . $type['name']); ?></option>
+					<?php } ?>
+				</select>
+				<br />
+				<label for="article_date_created_full">Created:</label>
+				<div id="article_date_created_full" class="input"></div>
+				<div id="article_date_created_academic" class="input"></div>
+				<br />
+				<label for="article_date_deadline_full">Deadline:</label>
+				<div id="article_date_deadline_full" class="input"></div>
+				<div id="article_date_deadline_academic" class="input"></div>
+				<br />
+			</div>
+
+			<div class="office_page" id="page_article">
+				<img src="/images/version2/office/icon_article.png" alt="Article Contents" class="title" />
+				<h2>Article Content</h2>
+
+				<label for="article_content_heading">Headline:</label>
+				<input type="text" name="article_content_heading" id="article_content_heading" value="" size="40" class="heading" />
+				<br />
+				<label for="article_content_blurb">Blurb:</label>
+				<textarea name="article_content_blurb" id="article_content_blurb" rows="4" cols="50"></textarea>
+				<br />
+				<label for="article_content_subtext">Introduction:</label>
+				<textarea name="article_content_subtext" id="article_content_subtext" rows="4" cols="50"></textarea>
+				<br />
+				<label for="article_content_wikitext">Body:</label>
+				<textarea name="article_content_wikitext" id="article_content_wikitext" rows="20" cols="50"></textarea>
+				<br />
+			</div>
+
+			<div class="office_page" id="page_photos">
+				<img src="/images/version2/office/icon_article.png" alt="Your Articles" class="title" />
+				<h2>Photos</h2>
+				
+				<div id="photo_container"></div>
+			</div>
+
+			<div class="office_page" id="page_bylines">
+				<img src="/images/version2/office/icon_article.png" alt="Bylines" class="title" />
+				<h2>Bylines</h2>
+
+				<label for="article_creator_name">Creator:</label>
+				<div id="article_creator_name" class="input"></div>
+				<br />
+				<label for="">Editor:</label>
+				<div id="article_editor_name" class="input"></div>
+				<br />
+				<label for="">Reporter:</label>
+				<br />
+			</div>
+
+			<div class="office_page" id="page_related">
+				<img src="/images/version2/office/icon_article.png" alt="Related Articles" class="title" />
+				<h2>Related</h2>
+			</div>
+
+			<div class="office_page" id="page_comments">
+				<img src="/images/version2/office/icon_article.png" alt="Comments" class="title" />
+				<h2>Comments</h2>
+			</div>
+
+			<div class="office_page" id="page_publish">
+				<img src="/images/version2/office/icon_article.png" alt="Publish" class="title" />
+				<h2>Publish</h2>
+
+				<label for="article_status">Status:</label>
+				<div id="article_status" class="input bold heading"></div>
+				<br />
+				<label for="article_date_published_full">Publish Date:</label>
+				<div id="article_date_published_full" class="input"></div>
+				<div id="article_date_published_academic" class="input"></div>
+				<br />
+				<label for="article_hits">Article Views:</label>
+				<div id="article_hits" class="input"></div>
+				<br />
+
+				<div class="clear"></div>
+				<img src="/images/version2/office/icon_article.png" alt="Checklist" class="title" />
+				<h2>Checklist</h2>
+			</div>
+
+		</div>
+		<div class="clear"></div>
+	</div>
+</div>
+
+<pre style="clear:both">
+<?php
+print_r($article);
+?>
+</pre>
