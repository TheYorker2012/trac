Index: public_html/javascript/office_interface.js
===================================================================
--- public_html/javascript/office_interface.js (revision d632b05df9693655807d0646c18519a707b62454)
+++ public_html/javascript/office_interface.js (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -1,6 +1,11 @@
 var oi_startPage = 'brief';
+var oi_changePeriod = 20000;
+var oi_changeDetector = false;
 var oi_articleData = new Array();
 var oi_photoData = new Array();
 var oi_photoTypeData = new Array();
+var oi_tagsSelected = new Array();
+var oi_tagsData = new Array();
+var oi_reporterData = new Array();
 var oi_popupShown = false;
 
@@ -13,10 +18,57 @@
 	oi_photoData = data['photos'];
 	oi_photoTypeData = data['photo_types'];
+	oi_tagsSelected = data['tags'];
+	oi_tagsData = data['tag_groups'];
+	oi_reporterData = data['reporters'];
 }
 
 function loadPage () {
+	loadAllData();
+	switchPage(oi_startPage);
+}
+
+function loadAllData () {
 	loadArticleData(oi_articleData);
 	loadPhotoData(oi_photoData, oi_articleData['thumbnail_photo_id'], oi_articleData['main_photo_id']);
-	switchPage(oi_startPage);
+	loadTagData(oi_tagsSelected, oi_tagsData);
+	loadReporterData(oi_reporterData);
+
+	oi_changeDetector = setTimeout(detectChanges, oi_changePeriod);
+}
+
+function leavePage () {
+	return detectChanges(true);
+}
+
+function detectChanges (warnOnly) {
+	if (warnOnly == undefined || warnOnly == null) {
+		warnOnly = false;
+	}
+	// Find changes
+	var new_article = detectArticleChanges();
+	var new_photos = detectPhotoChanges();
+	var new_tags = detectTagChanges();
+	var new_reporters = detectReporterChanges ();
+
+	// Save changes
+	if (new_article != null || new_photos != null || new_tags != null || new_reporters != null) {
+		if (warnOnly) {
+			return 'WARNING: You have made some changes which have not been saved yet!';
+		} else {
+			ajaxStart();
+			xajax__ajax(new_article, new_photos, new_tags, new_reporters);
+		}
+	}
+
+	if (new_article != null) oi_articleData = new_article;
+	if (new_photos != null) oi_photoData = new_photos;
+	if (new_tags != null) oi_tagsSelected = new_tags;
+	if (new_reporters != null) oi_reporterData = new_reporters;
+
+	oi_changeDetector = setTimeout(detectChanges, oi_changePeriod);
+}
+
+function savedChanges () {
+	ajaxEnd();
 }
 
@@ -49,4 +101,198 @@
 }
 
+function detectArticleChanges () {
+	var newArticleData = Object.clone(oi_articleData);
+	var change = false;
+
+	for (key in oi_articleData) {
+		var control = document.getElementById('article_' + key);
+		if (control !== null && control !== undefined) {
+			switch (control.tagName) {
+				case 'INPUT':
+				case 'TEXTAREA':
+					if (control.value != oi_articleData[key]) {
+						change = true;
+						newArticleData[key] = control.value;
+					}
+					break;
+				case 'SELECT':
+					if (control.options[control.selectedIndex].value != oi_articleData[key]) {
+						change = true;
+						newArticleData[key] = control.options[control.selectedIndex].value;
+					}
+					break;
+				case 'DIV':
+					break;
+				default:
+					alert('Unknown control type "' + control.tagName + '" for "' + key + '"');
+			}
+		}
+	}
+
+	if (change) {
+		return newArticleData;
+	} else {
+		return null;
+	}
+}
+
+function loadReporterData (reporters) {
+	var container = document.getElementById('reporter_container');
+	container.innerHTML = '';
+
+	for (var x = 0; x < reporters.length; x++) {
+		var lbl = document.createElement('label');
+		lbl.appendChild(document.createTextNode('Reporter:'));
+		container.appendChild(lbl);
+
+		var rname = document.createElement('div');
+		rname.className = 'input';
+		rname.appendChild(document.createTextNode(reporters[x]['user_name']));
+		container.appendChild(rname);
+
+		var rbylines = document.createElement('select');
+		rbylines.id = 'byline' + reporters[x]['user_id'];
+		var byline_selected = false;
+		if (reporters[x]['byline_id'] !== null && reporters[x]['byline_id'] != '') {
+			byline_selected = reporters[x]['byline_id'];
+		} else if (reporters[x]['default_byline_id'] !== null && reporters[x]['default_byline_id'] != '') {
+			byline_selected = reporters[x]['default_byline_id'];
+		}
+		for (var y = 0; y < reporters[x]['bylines'].length; y++) {
+			var group_name = reporters[x]['bylines'][y]['group_name'];
+			if (reporters[x]['bylines'][y]['user_id'] == null) group_name = 'GLOBAL BYLINE';
+			rbylines.options[rbylines.length] = new Option(
+				reporters[x]['bylines'][y]['name'] + ' - ' + reporters[x]['bylines'][y]['title'] + ' (' + group_name + ')',
+				reporters[x]['bylines'][y]['byline_id'],
+				(byline_selected == reporters[x]['bylines'][y]['byline_id'])
+			);
+		}
+		container.appendChild(rbylines);
+		
+		var rdelete = document.createElement('input');
+		rdelete.type = 'button';
+		rdelete.id = 'd' + reporters[x]['user_id'];
+		rdelete.value = 'Remove Reporter';
+		rdelete.onclick = function () { removeReporter(this); };
+		container.appendChild(rdelete);
+	}
+}
+
+function detectReporterChanges () {
+	var newReporterData = Object.clone(oi_reporterData);
+	var change = false;
+
+	for (var x = 0; x < oi_reporterData.length; x++) {
+		var control = $('byline' + oi_reporterData[x]['user_id']);
+		if (oi_reporterData[x]['byline_id'] != control.options[control.selectedIndex].value) {
+			newReporterData[x]['byline_id'] = control.options[control.selectedIndex].value;
+			change = true;
+		}
+	}
+
+	if (change) {
+		return newReporterData;
+	} else {
+		return null;
+	}
+}
+
+function loadTagData (tagsSelected, tagGroups) {
+	var tag_container = document.getElementById('custom_tags');
+
+	for (var group in tagGroups) {
+		var himg = document.createElement('img');
+		himg.className = 'title';
+		himg.src = '/images/version2/office/icon_article.png';
+		tag_container.appendChild(himg);
+		var heading = document.createElement('h2');
+		heading.appendChild(document.createTextNode(group));
+		tag_container.appendChild(heading);
+
+		for (var x = 0; x < tagGroups[group].length; x++) {
+			var tag_slot = document.createElement('div');
+			tag_slot.className = 'tag_slot';
+
+			var selection = document.createElement('input');
+			selection.type = 'checkbox';
+			selection.id = 'tag' + tagGroups[group][x]['id'];
+			if (tagsSelected[tagGroups[group][x]['id']] !== undefined) {
+				selection.checked = true;
+			}
+			tag_slot.appendChild(selection);
+
+			var lbl = document.createElement('label');
+			lbl.htmlFor = 'tag' + tagGroups[group][x]['id'];
+			lbl.appendChild(document.createTextNode(tagGroups[group][x]['name']));
+			tag_slot.appendChild(lbl);
+
+			tag_container.appendChild(tag_slot);
+		}
+
+		var hclear = document.createElement('div');
+		hclear.className = 'clear';
+		tag_container.appendChild(hclear);
+	}
+
+	var alltag_container = document.getElementById('all_tags');
+	for (var tag in tagsSelected) {
+		if (document.getElementById('tag' + tag) == undefined) {
+			var new_slot = document.createElement('div');
+			new_slot.className = 'tag_slot';
+
+			var selection = document.createElement('input');
+			selection.type = 'checkbox';
+			selection.id = 'tag' + tag;
+			selection.checked = true;
+			new_slot.appendChild(selection);
+
+			var lbl = document.createElement('label');
+			lbl.htmlFor = 'tag' + tag;
+			lbl.appendChild(document.createTextNode(tagsSelected[tag]));
+			new_slot.appendChild(lbl);
+
+			alltag_container.appendChild(new_slot);
+		}
+	}
+}
+
+function detectTagChanges () {
+	//var newTagData = Object.clone(oi_tagsSelected);
+	var newTagData = new Array();
+	var change = false;
+
+	// Set tag categories
+	for (var group in oi_tagsData) {
+		for (var x = 0; x < oi_tagsData[group].length; x++) {
+			var tag_input = $('tag' + oi_tagsData[group][x]['id']);
+			if (tag_input.checked == true) {
+				newTagData[oi_tagsData[group][x]['id']] = oi_tagsData[group][x]['name'];
+				// Check for new tags
+				if (oi_tagsSelected[oi_tagsData[group][x]['id']] == undefined) {
+					change = true;
+				}
+			}
+		}
+	}
+
+	// Custom tags && check for deleted tags
+	for (var tagID in oi_tagsSelected) {
+		var tag_input = $('tag' + tagID);
+		if (tag_input.checked == true) {
+			// Tag is still selected
+			newTagData[tagID] = oi_tagsSelected[tagID];
+		} else {
+			// Tag has been deleted
+			change = true;
+		}
+	}
+
+	if (change) {
+		return newTagData;
+	} else {
+		return null;
+	}
+}
+
 function loadPhotoData (photoData, thumbnail_id, intro_id) {
 	var container = document.getElementById('photo_container');
@@ -70,23 +316,29 @@
 		// Photo Caption
 		var slot_label = document.createElement('label');
+		slot_label.htmlFor = 'photoCaption' + photoData[x]['request_id'];
 		slot_label.appendChild(document.createTextNode('Caption:'));
 		slot.appendChild(slot_label);
 		var slot_input = document.createElement('input');
 		slot_input.type = 'text';
+		slot_input.id = 'photoCaption' + photoData[x]['request_id'];
 		slot_input.value = photoData[x]['photo_caption'];
 		slot.appendChild(slot_input);
 		// Photo ALT
 		var slot_label = document.createElement('label');
+		slot_label.htmlFor = 'photoALT' + photoData[x]['request_id'];
 		slot_label.appendChild(document.createTextNode('ALT / Hover:'));
 		slot.appendChild(slot_label);
 		var slot_input = document.createElement('input');
 		slot_input.type = 'text';
+		slot_input.id = 'photoALT' + photoData[x]['request_id'];
 		slot_input.value = photoData[x]['photo_alt'];
 		slot.appendChild(slot_input);
 		// Photo size
 		var slot_label = document.createElement('label');
+		slot_label.htmlFor = 'photoSize' + photoData[x]['request_id'];
 		slot_label.appendChild(document.createTextNode('Size:'));
 		slot.appendChild(slot_label);
 		var slot_size = document.createElement('select');
+		slot_size.id = 'photoSize' + photoData[x]['request_id'];
 		for (var y = 0; y < oi_photoTypeData.length; y++) {
 			slot_size.options[slot_size.length] = new Option(oi_photoTypeData[y]['name'], oi_photoTypeData[y]['id'], (oi_photoTypeData[y]['id'] == photoData[x]['photo_type']));
@@ -99,7 +351,19 @@
 		var slot_thumb = document.createElement('input');
 		slot_thumb.type = 'checkbox';
+		slot_thumb.id = 'thumbnail' + photoData[x]['photo_number'];
+		slot_thumb.value = photoData[x]['photo_number'];
 		if (thumbnail_id == photoData[x]['photo_number']) {
 			slot_thumb.checked = true;
 		}
+		slot_thumb.onmouseup = function () {
+			if (this.checked == false) {
+				if ($('article_thumbnail_photo_id').value != null && $('article_thumbnail_photo_id').value != '') {
+					$('thumbnail' + $('article_thumbnail_photo_id').value).checked = false;
+				}
+				$('article_thumbnail_photo_id').value = this.value;
+			} else {
+				$('article_thumbnail_photo_id').value = null;
+			}
+		};
 		slot.appendChild(slot_thumb);
 		// Main Photo?
@@ -109,8 +373,58 @@
 		var slot_thumb = document.createElement('input');
 		slot_thumb.type = 'checkbox';
+		slot_thumb.id = 'main' + photoData[x]['photo_number'];
+		slot_thumb.value = photoData[x]['photo_number'];
 		if (intro_id == photoData[x]['photo_number']) {
 			slot_thumb.checked = true;
 		}
+		slot_thumb.onmouseup = function () {
+			if (this.checked == false) {
+				if ($('article_main_photo_id').value != null && $('article_main_photo_id').value != '') {
+					$('main' + $('article_main_photo_id').value).checked = false;
+				}
+				$('article_main_photo_id').value = this.value;
+			} else {
+				$('article_main_photo_id').value = null;
+			}
+		};
 		slot.appendChild(slot_thumb);
+		// Insert button
+		var insert_button = document.createElement('input');
+		insert_button.id = 'p' + photoData[x]['photo_number'];
+		insert_button.type = 'button';
+		insert_button.value = 'Insert into article';
+		insert_button.className = 'photo_insert';
+		insert_button.onclick = function () { insertImageTag('article_content_wikitext', this.id.substr(1)); switchPage('article'); };
+		slot.appendChild(insert_button);
+	}
+}
+
+function detectPhotoChanges () {
+	var newPhotoData = Object.clone(oi_photoData);
+	var change = false;
+
+	for (var x = 0; x < oi_photoData.length; x++) {
+		// Caption
+		if ($('photoCaption' + oi_photoData[x]['request_id']).value != oi_photoData[x]['photo_caption']) {
+			newPhotoData[x]['photo_caption'] = $('photoCaption' + oi_photoData[x]['request_id']).value;
+			change = true;
+		}
+		// ALT
+		if ($('photoALT' + oi_photoData[x]['request_id']).value != oi_photoData[x]['photo_alt']) {
+			newPhotoData[x]['photo_alt'] = $('photoALT' + oi_photoData[x]['request_id']).value;
+			change = true;
+		}
+		// Size
+		var size_input = $('photoSize' + oi_photoData[x]['request_id']);
+		if (size_input.options[size_input.selectedIndex].value != oi_photoData[x]['photo_type']) {
+			newPhotoData[x]['photo_type'] = size_input.options[size_input.selectedIndex].value;
+			change = true;
+		}
+	}
+
+	if (change) {
+		return newPhotoData;
+	} else {
+		return null;
 	}
 }
@@ -137,2 +451,69 @@
 	return false;
 }
+
+function publishArticle () {
+	window.location = '/office/article/publish/' + oi_articleData['id'] + '/' + $('publish').value;
+}
+
+function changeEditor () {
+	$('article_editor_name').className = 'hide';
+	$('changeEditor').className = 'hide';
+	$('article_editor_user_id').className = 'show';
+}
+
+function changedEditor () {
+	var control = $('article_editor_user_id');
+	control.className = 'hide';
+	$('article_editor_name').innerHTML = control.options[control.selectedIndex].text;
+	$('article_editor_name').className = 'input';
+	$('changeEditor').className = 'show';
+}
+
+function addReporter (control) {
+	var reporter_id = control.options[control.selectedIndex].value;
+	if (reporter_id == -1) return;
+	control.selectedIndex = 0;
+	$('reporter_prompt').className = 'show';
+	$('reporter_control').className = 'hide';
+	ajaxStart();
+	xajax__reporterChange(reporter_id, 'add');
+}
+
+function removeReporter (control) {
+	var reporter_id = control.id.substr(1);
+	if (reporter_id == '') return;
+	ajaxStart();
+	xajax__reporterChange(reporter_id, 'remove');
+}
+
+function callbackReporters (reporters) {
+	oi_reporterData = reporters;
+	loadReporterData(oi_reporterData);
+	ajaxEnd();
+}
+
+function ajaxStart () {
+	var indicator = document.getElementById('office_sidebar_wait');
+	var saveButton = document.getElementById('office_sidebar_save');
+	indicator.className = '';
+	saveButton.className = 'hide';
+}
+
+function ajaxEnd () {
+	var indicator = document.getElementById('office_sidebar_wait');
+	var saveButton = document.getElementById('office_sidebar_save');
+	indicator.className = 'hide';
+	saveButton.className = '';
+}
+
+function errorPermission (permission) {
+	alert('ERROR: Unable to save the changes to this article as you do not have the required privilege (' + permission + ') to do so.');
+	loadAllData();
+	ajaxEnd();
+}
+
+function errorInUse (user_name) {
+	alert('ERROR: Sorry, this article is currently being edited by ' + user_name + '! Please try again later.');
+	loadAllData();
+	ajaxEnd();
+}
Index: public_html/stylesheets/office_interface.css
===================================================================
--- public_html/stylesheets/office_interface.css (revision 5572088676e9ae1456d76c01d948ce0c20619738)
+++ public_html/stylesheets/office_interface.css (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -46,4 +46,12 @@
 	float: right;
 	width: 140px;
+}
+
+div#office_sidebar div {
+	text-align: center;
+}
+
+div#office_sidebar input {
+	float: none;
 }
 
@@ -82,4 +90,5 @@
 div#office_container div#office_sidebar ul li#nav_related { list-style-image: url('/images/icons/arrow_switch.png'); }
 div#office_container div#office_sidebar ul li#nav_comments { list-style-image: url('/images/icons/comment.png'); }
+div#office_container div#office_sidebar ul li#nav_revisions { list-style-image: url('/images/icons/book_next.png'); }
 div#office_container div#office_sidebar ul li#nav_publish { list-style-image: url('/images/icons/package.png'); }
 
@@ -121,5 +130,19 @@
 }
 
-
+div#page_photos div.photo_slot input.photo_insert {
+	float: right;
+}
+
+div#page_related div.tag_slot {
+	float: left;
+	display: block;
+	width: 20%;
+}
+
+div#page_related div.tag_slot label {
+	clear: none;
+	margin: 0.2em;
+	text-align: left;
+}
 
 
Index: system/application/config/permissions.php
===================================================================
--- system/application/config/permissions.php (revision e4f1bf6a2739f084bc8a3f3ad54c46bdb98ccb8a)
+++ system/application/config/permissions.php (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -30,7 +30,7 @@
 	'ARTICLE_VIEW'                     => 'View article contents',
 	'ARTICLE_ADD'                      => 'Create new articles',
-	'ARTICLE_MODIFY'                   => '(unimplemented) Modify articles',
+	'ARTICLE_MODIFY'                   => 'Modify articles',
 	'ARTICLE_DELETE'                   => '(unimplemented) Delete articles',
-	'ARTICLE_PUBLISH'                  => '(unimplemented) Publish articles',
+	'ARTICLE_PUBLISH'                  => 'Publish articles',
 	'ARTICLE_PULL'                     => '(unimplemented) Pull published articles',
 	
Index: system/application/config/yorker.php
===================================================================
--- system/application/config/yorker.php (revision e71456289bd48cec1d420c382d2b5a0bfff9fb24)
+++ system/application/config/yorker.php (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -34,5 +34,5 @@
 	'edit'  => array(
 		'author'    => true,
-		'moderator' => true,
+		'moderator' => false,
 	),
 	// Number of comments displayed on a page before a new page is started
Index: system/application/controllers/office/article.php
===================================================================
--- system/application/controllers/office/article.php (revision 34c7077762cfd01fbf31e4c66f648b05e0571597)
+++ system/application/controllers/office/article.php (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -17,4 +17,5 @@
 		$this->load->model('article_model');
 		$this->load->model('photos_model');
+		$this->load->model('tags_model');
 	}
 
@@ -43,27 +44,53 @@
 		if (empty($data['article'])) show_404();
 
+		// Quick way of adding photos to an article straight from the gallery
+		if (isset($_SESSION['img']) && (count($_SESSION['img']) > 0)) {
+			foreach ($_SESSION['img'] as $photo) {
+				$photo_req_id = $this->photos_model->AddNewPhotoRequest($this->user_auth->entityId, $article_id, '', '');
+				$this->photos_model->SuggestPhoto($photo_req_id, $photo['list'], 'Added to article straight from gallery.', $this->user_auth->entityId);
+				$this->photos_model->FlagRequestReady($photo_req_id);
+				$this->photos_model->SelectPhoto($photo_req_id, $photo['list'], $this->user_auth->entityId);
+			}
+			unset($_SESSION['img']);
+		}
+
 		// Setup AJAX functionality
 		$this->load->library('xajax');
+		$this->xajax->registerFunction(array('_ajax', &$this, '_ajax'));
+		$this->xajax->registerFunction(array('_reporterChange', &$this, '_reporterChange'));
+		$this->xajax->registerFunction(array('_getMediaFiles', &$this, '_getMediaFiles'));
 		$this->xajax->processRequests();
 
 		// Get more article data
 		$data['photos'] = $this->photos_model->GetPhotoRequestsForArticle($article_id);
+		$data['tags'] = $this->tags_model->getArticleTags($article_id);
+		$data['reporters'] = $this->article_model->getReportersForArticle($article_id);
 
 		// Get possible field values
 		$data['types'] = $this->article_model->getAllContentTypes();
 		$data['photo_types'] = $this->photos_model->GetThumbnailTypes();
-
-
-		if (!empty($_SESSION['oi_defaultPage'])) {
-			$data['start_page'] = $_SESSION['oi_defaultPage'];
-			unset($_SESSION['oi_defaultPage']);
-		} else {
-			$data['start_page'] = 'brief';
-		}
+		$data['tag_groups'] = $this->tags_model->getPossibleArticleTags($data['article']['type_id']);
+		$data['editors'] = $this->permissions_model->getAllUsersWithPermission('ARTICLE_PUBLISH');
+		$data['all_reporters'] = $this->permissions_model->getAllUsersWithPermission('ARTICLE_MODIFY');
+
+		// Convert some data to JSON
 		$data['articleJS'] = json_encode(array(
 			'article'		=>	$data['article'],
 			'photos'		=>	$data['photos'],
-			'photo_types'	=>	$data['photo_types']
+			'photo_types'	=>	$data['photo_types'],
+			'tags'			=>	$data['tags'],
+			'tag_groups'	=>	$data['tag_groups'],
+			'reporters'		=>	$data['reporters']
 		));
+
+		// Which tab should we display first?
+		if (!empty($_SESSION['oi_defaultPage']) && !empty($_SESSION['oi_defaultPage'][$article_id])) {
+			$data['start_page'] = $_SESSION['oi_defaultPage'][$article_id];
+			unset($_SESSION['oi_defaultPage']);
+		} else {
+			$data['start_page'] = 'brief';
+		}
+
+		// Setup page
 		$this->pages_model->SetPageCode('office_news_article');
 		$this->main_frame->SetTitleParameters(
@@ -74,937 +101,157 @@
 		$this->main_frame->IncludeJs('/javascript/office_interface.js');
 		$this->main_frame->IncludeCss('/stylesheets/office_interface.css');
+		$this->main_frame->IncludeCss('/stylesheets/calendar_select.css');
 		$this->main_frame->SetExtraHead($this->xajax->getJavascript(null, '/javascript/xajax.js'));
 		$this->main_frame->Load();
 	}
 
-	function create ()
-	{
-	}
-	
-	function ajax ()
-	{
-	}
-
-
-
-
-	function _remap2($method = NULL)
-	{
-		if (!CheckPermissions('office')) return;
-		if (empty($method)) {
-			if (!CheckRolePermissions('ARTICLE_ADD')) return;
-			$article_id = 0;
-		} else {
-			if (!CheckRolePermissions('ARTICLE_VIEW')) return;
-			$article_id = $method;
-		}
-
+	function photo ()
+	{
+		if (!CheckPermissions('office')) return;
+		if (!CheckRolePermissions('ARTICLE_MODIFY')) return;
+
+		$article_id = $this->uri->segment(4);
+		$upload = $this->uri->segment(5);
+
+		if (empty($article_id)) show_404();
+		if (empty($_SESSION['oi_defaultPage'])) $_SESSION['oi_defaultPage'] = array();
+		$_SESSION['oi_defaultPage'][$article_id] = 'photos';
+		if (empty($upload)) {
+			redirect('/office/gallery');
+		} else {
+			redirect('/office/gallery/upload');
+		}
+	}
+
+	function publish ()
+	{
+		if (!CheckPermissions('office')) return;
+		if (!CheckRolePermissions('ARTICLE_PUBLISH')) return;
+
+		$article_id = $this->uri->segment(4);
+		$publish_date = $this->uri->segment(5);
+
+		if (empty($article_id)) show_404();
+		$article = $this->article_model->getById($article_id);
+		if (empty($article)) show_404();
+
+		$errors = array();
+		if (empty($article['content_heading'])) $errors[] = 'Headline not specified.';
+		if (empty($article['content_subtext'])) $errors[] = 'Blurb not specified.';
+		if (empty($article['thumbnail_photo_id'])) $errors[] = 'Photo to use for article thumbnails not selected.';
+
+		$reporters = $this->article_model->getReportersForArticle($article_id);
+		if (empty($reporters)) $errors[] = 'At least one reporter must be assigned and have accepted to write this article. All reporters must have a business card also.';
+
+		if (empty($errors)) {
+			$publish_date = date('Y-m-d H:i:s', $publish_date);
+			$this->article_model->publish($article_id, $article['content_id'], $publish_date);
+//			$this->load->library('facebook_ticker');
+//			if ($this->facebook_ticker->TickerUpdate()) {
+//				$this->main_frame->AddMessage('success','The Yorker Facebook News Ticker Application was successfully updated.');
+//			} else {
+//				$this->main_frame->AddMessage('error','There was a problem updating The Yorker Facebook News Ticker Application.');
+//			}
+			$this->main_frame->AddMessage('success','The article was successfully published.');
+		} else {
+			$this->main_frame->AddMessage('error', 'Unable to publish the article for the following reasons: <ul><li>' . implode('</li><li>', $errors) . '</li></ul>');
+		}
+
+		if (empty($_SESSION['oi_defaultPage'])) $_SESSION['oi_defaultPage'] = array();
+		$_SESSION['oi_defaultPage'][$article_id] = 'publish';
+		redirect('/office/article/' . $article_id);
+	}
+
+	function _ajax ($article = NULL, $photos = NULL, $tags = NULL, $reporters = NULL)
+	{
+		$article_id = $this->uri->segment(3);
 		$data = array();
-
-		$this->load->library('xajax');
-		$this->xajax->registerFunction(array('_addComment', &$this, '_addComment'));
-		$this->xajax->processRequests();
-
-
-		$this->main_frame->SetContentSimple('office/article/main', $data);
-		$this->main_frame->IncludeJs('javascript/wikitoolbar.js');
-		$this->main_frame->IncludeCss('/stylesheets/office_interface.css');
-		$this->main_frame->IncludeJs('/javascript/office_interface.js');
-		$this->main_frame->SetExtraHead($this->xajax->getJavascript(null, '/javascript/xajax.js'));
-		$this->main_frame->Load();
-	}
-
-
-
-
-
-	function index2($type_info)
-	{
-		/// Make sure users have necessary permissions to view this page
-		if (!CheckPermissions('office')) return;
-
-		/// Get changeable page content
-		$this->pages_model->SetPageCode('office_news_home');
-		/// Get page content
-		$data['tasks_heading'] = $this->pages_model->GetPropertyText('news_office:tasks_heading', TRUE);
-		$data['mine_heading'] = $this->pages_model->GetPropertyText('news_office:my_jobs_heading', TRUE);
-
-		$data['box_contents'] = $this->requests_model->GetArticlesForBox($type_info['codename'], $this->user_auth->entityId);
-		$data['parent_type'] = $type_info['has_children'];
-		//$data['box_display_name'] = $type_info['name'];
-
-		/// Make it so we only have to worry about two levels of access as admins can do everything editors can
-		$data['user_level'] = GetUserLevel();
-		if ($data['user_level'] == 'admin') {
-			$data['user_level'] = 'editor';
-		}
-		/// Get different content based on access
-		if ($data['user_level'] == 'editor') {
-			$data['tasks']['request'] = $this->pages_model->GetPropertyText('news_office:tasks_request_editor', TRUE);
-		} else {
-			$data['tasks']['request'] = $this->pages_model->GetPropertyText('news_office:tasks_request', TRUE);
-		}
-		
-		//from the editor message
-		$data['main_text'] = $this->pages_model->GetPropertyWikitext($type_info['codename'].'_main_text');
-
-		/// Set up the main frame
-		$this->main_frame->SetContentSimple('office/news/home', $data);
-		/// Set page title & load main frame with view
-		$this->main_frame->SetTitleParameters(
-			array('section' => $type_info['name'])
-		);
-		$this->main_frame->Load();
-	}
-
-
-	/**
-	 *	@brief Create a new suggestion/request
-	 */
-	function request()
-	{
-		/// Make sure users have necessary permissions to view this page
-		if (!CheckPermissions('office')) return;
-
-		/// Get changeable page content
-		$this->pages_model->SetPageCode('office_news_request');
-		/// Get page content
-		$data['boxes'] = $this->requests_model->getBoxes();
-		/// @TODO: this needs to get reporters only part of the article type yorker sub-team
-		$data['reporters'] = $this->requests_model->getReporters();
-		$data['tasks_heading'] = $this->pages_model->GetPropertyText('news_office:tasks_heading', TRUE);
-
-		/// Make it so we only have to worry about two levels of access as admins can do everything editors can
-		$data['user_level'] = GetUserLevel();
-		if ($data['user_level'] == 'admin') {
-			$data['user_level'] = 'editor';
-		}
-		/// Get different content based on access
-		if ($data['user_level'] == 'editor') {
-			$data['heading'] = $this->pages_model->GetPropertyText('heading_editor');
-			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro_editor');
-			$data['status'] = 'request';
-		} else {
-			$data['heading'] = $this->pages_model->GetPropertyText('heading');
-			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro');
-			$data['status'] = 'suggestion';
-		}
-
-		/// Perform validation checks on submitted data
-		$this->load->library('validation');
-		$this->validation->set_error_delimiters('<li>','</li>');
-		/// Validation rules
-		$rules['r_title'] = 'trim|required|xss_clean';
-		$fields['r_title'] = 'title';
-		$rules['r_brief'] = 'trim|required|xss_clean';
-		$fields['r_brief'] = 'brief';
-		$rules['r_box'] = 'trim|required|xss_clean';
-		$fields['r_box'] = 'box';
-		if ($data['status'] == 'request') {
-			$rules['r_deadline'] = 'trim|required|numeric';
-			$fields['r_deadline'] = 'deadline';
-			$rules['r_reporter'] = '';
-			$fields['r_reporter'] = 'reporter';
-		}
-		$this->validation->set_rules($rules);
-		$this->validation->set_fields($fields);
-		/// Run validation checks, if they pass proceed to conduct db integrity checks
-		$errors = array();
-		if ($this->validation->run()) {
-			$deadline = NULL;
-			if ($data['status'] == 'request') {
-				if ($this->input->post('r_deadline') < mktime()) {
-					$errors[] = 'Please select a deadline in the future';
-				} elseif ($this->input->post('r_deadline') > (mktime() + (60*60*24*365))) {
-					$errors[] = 'Please select a deadline within the next year';
+		$xajax_response = new xajaxResponse();
+
+		if (!$this->permissions_model->hasUserPermission('ARTICLE_MODIFY')) {
+			$xajax_response->addScriptCall('errorPermission', 'ARTICLE_MODIFY');
+			return $xajax_response;
+		}
+
+		if (!empty($reporters)) {
+			foreach ($reporters as $reporter) {
+				$this->article_model->changeByline($article_id, $reporter['user_id'], $reporter['byline_id']);
+			}
+		}
+
+		if (!empty($tags)) {
+			$this->tags_model->resetArticleTags($article_id);
+			$tag_ids = array_keys($tags);
+			$this->tags_model->addArticleTags($article_id, $tag_ids);
+		}
+		$data['tags'] = $this->tags_model->getArticleTags($article_id);
+
+		if (!empty($photos)) {
+			foreach ($photos as $photo) {
+				$this->photos_model->ChangeDetails($photo['request_id'],$photo['photo_caption'],$photo['photo_alt'],$photo['photo_type']);
+			}
+		}
+		$data['photos'] = $this->photos_model->GetPhotoRequestsForArticle($article_id);
+
+		// Process main article changes
+		if (!empty($article)) {
+			$this->load->library('wikiparser');
+			foreach ($data['photos'] as $photo) {
+				$this->wikiparser->add_image_override($photo['photo_number'], $this->image->getThumb($photo['photo_id'], $photo['photo_codename'], true), $photo['photo_caption']);
+			}
+			$cache = $this->wikiparser->parse($article['content_wikitext']);
+			if (empty($article['date_deadline'])) {
+				$deadline = date('Y-m-d H:i:s');
+			} else {
+				$deadline = date('Y-m-d H:i:s', $article['date_deadline']);
+			}
+			$this->article_model->update($article['id'], $article['type_id'], $article['request_title'], $article['request_description'], $article['thumbnail_photo_id'], $article['main_photo_id'], $deadline, $article['editor_user_id']);
+			$revision = $this->article_model->getLastRevisionMeta($article['id']);
+			if (empty($revision)) {
+				// Create a new revision
+				$this->article_model->newRevision($article['id'], $this->user_auth->entityId, $article['content_heading'], $article['content_subtext'], $article['content_wikitext'], $cache, $article['content_blurb']);
+			} elseif ($revision->last_update > mktime() - (60 * 10)) {
+				if ($revision->user_id != $this->user_auth->entityId) {
+					// Someone else is editing this article!!!
+					$xajax_response->addScriptCall('errorInUse', $revision->user_name);
+					return $xajax_response;
 				} else {
-					$deadline = $this->input->post('r_deadline');
-				}
-				$valid = true;
-				if (count($this->input->post('r_reporter')) == 0) {
-					$valid = false;
-				}
-				if($this->input->post('r_reporter')) {
-					foreach ($this->input->post('r_reporter') as $reporter) {
-						if (!is_numeric($reporter)) {
-							$valid = false;
-						}
-					}
-					if ((!$valid) || (!$this->requests_model->reportersExist($this->input->post('r_reporter')))) {
-						$errors[] = 'Please choose the reporters you wish to assign the request to';
-					}
-				}
-			}
-			if (!$this->requests_model->isBox($this->input->post('r_box'))) {
-				$errors[] = 'Please select the box you wish the ' . $data['status'] . ' to be submitted to';
-			}
-
-			/// If no db integrity errors then save request
-			if (count($errors) == 0) {
-				if ($deadline != NULL) {
-					$deadline = date('Y-m-d H:i:s', $deadline);
-				}
-				$article_id = $this->requests_model->CreateRequest($data['status'],$this->input->post('r_box'),$this->input->post('r_title'),$this->input->post('r_brief'),$this->user_auth->entityId,$deadline);
-				if ($data['status'] == 'request') {
-					$accept_data = array(
-						'editor' 		=>	$this->user_auth->entityId,
-						'publish_date' 	=>	$deadline,
-						'title'			=>	$this->input->post('r_title'),
-						'description'	=>	$this->input->post('r_brief'),
-						'content_type'	=>	$this->input->post('r_box')
-					);
-					$this->requests_model->UpdateRequestStatus($article_id,'request',$accept_data);
-					/// Assign reporters to request
-					if($this->input->post('r_reporter')) {
-						foreach ($this->input->post('r_reporter') as $reporter) {
-							$byline = $this->article_model->GetReporterByline($reporter);
-							$this->requests_model->AddUserToRequest($article_id, $reporter, $this->user_auth->entityId, ((isset($byline['id'])) ? $byline['id'] : NULL));
-						}
-					}
-					/// Create initial revision
-					$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, '', '', '', '', '', '');
-				}
-				$this->main_frame->AddMessage('success','New article ' . $data['status'] . ' created.');
-				redirect('/office/news/' . $article_id);
-			}
-		}
-
-		/// Validation errors occured
-		if ($this->validation->error_string != "") {
-			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $this->validation->error_string . '</ul>');
-		} elseif (count($errors) > 0) {
-			$temp_msg = '';
-			foreach ($errors as $error) {
-				$temp_msg .= '<li>' . $error . '</li>';
-			}
-			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $temp_msg . '</ul>');
-		}
-
-		/// Set up the main frame
-		$this->main_frame->SetContentSimple('office/news/request', $data);
-		/// Set page title & load main frame with view
-		$this->main_frame->SetTitleParameters(
-			array('action' => 'New', 'type' => $data['status'])
-		);
-
-		/// Load main frame
-		$this->main_frame->AddExtraHead('<link href="/stylesheets/calendar_select.css" rel="stylesheet" type="text/css" />');
-		$this->main_frame->Load();
-	}
-
-
-	/**
-	 *	@brief Create a new article without having to make a suggestion or request
-	 */
-	function create2()
-	{
-		/// Make sure users have necessary permissions to view this page
-		if (!CheckPermissions('office')) return;
-
-		/// Get changeable page content
-		$this->pages_model->SetPageCode('office_news_create');
-		/// Get page content
-		$data['boxes'] = $this->requests_model->getBoxes();
-		$data['user_level'] = 'editor';
-		$data['page_information'] = $this->pages_model->GetPropertyWikitext('page_information');
-		$data['status'] = 'article';
-
-		/// Perform validation checks on submitted data
-		$this->load->library('validation');
-		$this->validation->set_error_delimiters('<li>','</li>');
-		/// Validation rules
-		$rules['r_title'] = 'trim|required|xss_clean';
-		$fields['r_title'] = 'title';
-		$rules['r_brief'] = 'trim|required|xss_clean';
-		$fields['r_brief'] = 'brief';
-		$rules['r_box'] = 'trim|required|xss_clean';
-		$fields['r_box'] = 'box';
-		$rules['r_deadline'] = 'trim|required|numeric';
-		$fields['r_deadline'] = 'deadline';
-		$this->validation->set_rules($rules);
-		$this->validation->set_fields($fields);
-		/// Run validation checks, if they pass proceed to conduct db integrity checks
-		$errors = array();
-		if ($this->validation->run()) {
-			$deadline = NULL;
-			if ($this->input->post('r_deadline') < mktime()) {
-				$errors[] = 'Please select a deadline in the future';
-			} elseif ($this->input->post('r_deadline') > (mktime() + (60*60*24*365))) {
-				$errors[] = 'Please select a deadline within the next year';
-			} else {
-				$deadline = $this->input->post('r_deadline');
-			}
-			if (!$this->requests_model->isBox($this->input->post('r_box'))) {
-				$errors[] = 'Please select the box you wish the ' . $data['status'] . ' to be submitted to';
-			}
-
-			/// If no db integrity errors then save request
-			if (count($errors) == 0) {
-				if ($deadline != NULL) {
-					$deadline = date('Y-m-d H:i:s', $deadline);
-				}
-				$article_id = $this->requests_model->CreateRequest('request',$this->input->post('r_box'),$this->input->post('r_title'),$this->input->post('r_brief'),$this->user_auth->entityId,$deadline);
-
-				$byline = $this->article_model->GetReporterByline($this->user_auth->entityId);
-				$this->requests_model->AddUserToRequest($article_id, $this->user_auth->entityId, $this->user_auth->entityId, ((isset($byline['id'])) ? $byline['id'] : NULL));
-				$this->requests_model->AcceptRequest($article_id, $this->user_auth->entityId);
-				$accept_data = array(
-					'editor' 		=>	$this->user_auth->entityId,
-					'publish_date' 	=>	$deadline,
-					'title'			=>	$this->input->post('r_title'),
-					'description'	=>	$this->input->post('r_brief'),
-					'content_type'	=>	$this->input->post('r_box')
-				);
-				$this->requests_model->UpdateRequestStatus($article_id,'request',$accept_data);
-				$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, '', '', '', '', '', '');
-				$this->main_frame->AddMessage('success','New article ' . $data['status'] . ' created.');
-				redirect('/office/news/' . $article_id);
-			}
-		}
-
-		/// Validation errors occured
-		if ($this->validation->error_string != "") {
-			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $this->validation->error_string . '</ul>');
-		} elseif (count($errors) > 0) {
-			$temp_msg = '';
-			foreach ($errors as $error) {
-				$temp_msg .= '<li>' . $error . '</li>';
-			}
-			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $temp_msg . '</ul>');
-		}
-
-		/// Set up the main frame
-		$this->main_frame->SetContentSimple('office/news/create', $data);
-
-		/// Load main frame
-		$this->main_frame->AddExtraHead('<link href="/stylesheets/calendar_select.css" rel="stylesheet" type="text/css" />');
-		$this->main_frame->Load();
-	}
-
-
-
-
-
-
-
-
-
-
-
-
-
-	function _editRequest ($article_id,$data)
-	{
-
-		/// Get changeable page content
-		$this->pages_model->SetPageCode('office_news_request');
-		/// Get page content
-		$data['boxes'] = $this->requests_model->getBoxes();
-		/// @TODO: this needs to get reporters only part of the article type yorker sub-team
-		$data['reporters'] = $this->requests_model->getReporters();
-		$data['tasks_heading'] = $this->pages_model->GetPropertyText('news_office:tasks_heading', TRUE);
-		$data['status'] = 'request';
-
-		// Get different content based on access
-		if ($data['user_level'] == 'editor') {
-			$data['heading'] = $this->pages_model->GetPropertyText('heading_editor');
-			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro_editor');
-		} else {
-			$data['heading'] = $this->pages_model->GetPropertyText('heading');
-			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro');
-		}
-		$data['unassigned_requests'] = $this->pages_model->GetPropertyWikitext('unassigned_requests');
-		
-		$data['edit_enable'] = false;
-		if ($data['status'] == 'suggestion') {
-			$data['article'] = $this->requests_model->GetSuggestedArticle($article_id);
-			if (($data['user_level'] == 'editor') || ($data['article']['userid'] == $this->user_auth->entityId)) {
-				$data['edit_enable'] = true;
-			}
-		} elseif ($data['status'] == 'request') {
-			$data['article'] = $this->requests_model->GetRequestedArticle($article_id);
-			$data['assigned_reporters'] = $this->requests_model->GetWritersForArticle($article_id);
-			$data['isUserAssigned'] = $this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId);
-			if ($data['user_level'] == 'editor') {
-				$data['edit_enable'] = true;
-			}
-		}
-
-		// Perform validation checks on submitted data
-		$this->load->library('validation');
-		$this->validation->set_error_delimiters('<li>','</li>');
-		// Validation rules
-		$rules['r_title'] = 'trim|required|xss_clean';
-		$fields['r_title'] = 'title';
-		$rules['r_brief'] = 'trim|required|xss_clean';
-		$fields['r_brief'] = 'brief';
-		$rules['r_box'] = 'trim|required|xss_clean';
-		$fields['r_box'] = 'box';
-		if ($data['user_level'] == 'editor') {
-			$rules['r_deadline'] = 'trim|required|numeric';
-			$fields['r_deadline'] = 'deadline';
-			$rules['r_reporter'] = '';
-			$fields['r_reporter'] = 'reporter';
-		}
-		$this->validation->set_rules($rules);
-		$this->validation->set_fields($fields);
-		// Run validation checks, if they pass proceed to conduct db integrity checks
-		$errors = array();
-		if ($this->validation->run()) {
-			$deadline = NULL;
-			if ($data['user_level'] == 'editor') {
-				if ($this->input->post('r_deadline') < mktime()) {
-					$errors[] = 'Please select a deadline in the future';
-				} elseif ($this->input->post('r_deadline') > (mktime() + (60*60*24*365))) {
-					$errors[] = 'Please select a deadline within the next year';
-				} else {
-					$deadline = $this->input->post('r_deadline');
-				}
-				if($this->input->post('r_reporter')) {
-					$valid = true;
-					foreach ($this->input->post('r_reporter') as $reporter) {
-						if (!is_numeric($reporter)) {
-							$valid = false;
-						}
-					}
-					if ((!$valid) || (!$this->requests_model->reportersExist($this->input->post('r_reporter')))) {
-						$errors[] = 'Please choose the reporters you wish to assign the request to';
-					}
-				}
-			}
-			if (!$this->requests_model->isBox($this->input->post('r_box'))) {
-				$errors[] = 'Please select the box you wish the ' . $data['status'] . ' to be submitted to';
-			}
-
-			// If no db integrity errors then save request
-			if (count($errors) == 0) {
-				if ($deadline != NULL) {
-					$deadline = date('Y-m-d H:i:s', $deadline);
-				}
-				if ($data['status'] == 'request') {
-					if ($data['user_level'] == 'editor') {
-						$accept_data = array(
-							'editor' => $this->user_auth->entityId,
-							'publish_date' => $deadline,
-							'title' => $this->input->post('r_title'),
-							'description' => $this->input->post('r_brief'),
-							'content_type' => $this->input->post('r_box')
-						);
-						$this->requests_model->UpdateRequestStatus($article_id,'request',$accept_data);
-						$this->requests_model->RemoveAllUsersFromRequest($article_id);
-						if($this->input->post('r_reporter')) {
-							foreach ($this->input->post('r_reporter') as $reporter) {
-								$byline = $this->article_model->GetReporterByline($reporter);
-								$this->requests_model->AddUserToRequest($article_id, $reporter, $this->user_auth->entityId, ((isset($byline['id'])) ? $byline['id'] : NULL));
-								if ($data['live_content'] !== NULL) {
-									$this->requests_model->AcceptRequest($article_id, $reporter);
-								}
-							}
-						}
-						$this->main_frame->AddMessage('success','Request details saved.');
-					}
-				}
-				redirect('/office/news/' . $data['article']['id']);
-			}
-		}
-
-		// Validation errors occured
-		if ($this->validation->error_string != "") {
-			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $this->validation->error_string . '</ul>');
-		} elseif (count($errors) > 0) {
-			$temp_msg = '';
-			foreach ($errors as $error) {
-				$temp_msg .= '<li>' . $error . '</li>';
-			}
-			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $temp_msg . '</ul>');
-		} else {
-			// First time form has been loaded so populate fields
-			$this->validation->r_title = $data['article']['title'];
-			$this->validation->r_brief = $data['article']['description'];
-			$this->validation->r_box = $data['article']['box_name'];
-			if ($data['status'] == 'request') {
-				$this->validation->r_deadline = $data['article']['deadline'];
-			}
-		}
-
-		// Set up the main frame
-		$this->main_frame->SetContentSimple('office/news/edit_request', $data);
-		// Set page title & load main frame with view
-		$this->main_frame->SetTitleParameters(
-			array('action' => 'Edit', 'type' => $data['status'])
-		);
-		/// Load main frame
-		$this->main_frame->AddExtraHead('<link href="/stylesheets/calendar_select.css" rel="stylesheet" type="text/css" />');
-		$this->main_frame->Load();
-	}
-
-
-
-
-
-
-
-	/**
-	 *	@brief Mapping function for operations on a particular article id
-	 */
-	function article($article_id = 0)
-	{
-		/// Make sure users have necessary permissions to view this page
-		if (!CheckPermissions('office')) return;
-
-		/// Get article ID
-		if ($article_id == 0) {
-			if (is_numeric($this->uri->segment(4))) {
-				redirect('/office/news/' . $this->uri->segment(4));
-			} else {
-				redirect('/office/news');
-			}
-		} else {
-			/// Check article ID exists
-			if (is_numeric($article_id)) {
-				$article_info = $this->article_model->GetArticleHeader($article_id);
-				if ($article_info !== FALSE) {
-
-					/// Make it so we only have to worry about two levels of access as admins can do everything editors can
-					$data['user_level'] = GetUserLevel();
-					if ($data['user_level'] == 'admin') {
-						$data['user_level'] = 'editor';
-					}
-
-					// Quick way of adding photos to an article straight from the gallery
-					if (isset($_SESSION['img']) && (count($_SESSION['img']) > 0)) {
-						if (isset($_POST['add_photos'])) {
-							if (count($_POST['imgadd']) > 0) {
-								foreach ($_POST['imgadd'] as $photo) {
-									$photo_title = $_POST['img' . $photo . '_title'];
-									$photo_alt = $_POST['img' . $photo . '_alt'];
-									$photo_req_id = $this->photos_model->AddNewPhotoRequest($this->user_auth->entityId,$article_id,$photo_title,$photo_alt);
-									$this->photos_model->SuggestPhoto($photo_req_id,$photo,'Added to article straight from gallery.',$this->user_auth->entityId);
-									$this->photos_model->FlagRequestReady($photo_req_id);
-									$this->photos_model->SelectPhoto($photo_req_id,$photo,$this->user_auth->entityId);
-								}
-							}
-							unset($_SESSION['img']);
-							redirect('/office/news/' . $article_id);
-						} else {
-							$this->load->library('image');
-							$this->pages_model->SetPageCode('office_news_photo_suggest');
-							$this->main_frame->SetContentSimple('office/news/photo_suggest', $data);
-							$this->main_frame->SetTitleParameters(
-								array('title' => $article_info['requesttitle'])
-							);
-							$this->main_frame->Load();
-						}
-						return;
-					}
-
-					/// Determine what operation to perform
-					switch ($article_info['status']) {
-						case 'pulled':
-							$this->_showarticle($article_id);
-						case 'published':
-						case 'request':
-							if ($data['user_level'] == 'editor') {
-								/// If editor but also assigned reporter and not accepted then is reporter
-								if ($this->uri->segment(4,'') == 'edit') {
-									$this->_editRequest($article_id,$data);
-								} elseif ($this->input->post('publish') == 'Publish Article') {
-									$this->_publishArticle($article_id);
-								} else {
-									/// EDITOR: Changes + Pull + Change publish date
-									$this->_showarticle($article_id);
-								}
-							} else {
-								/// EVERYONE: View + Notice that already published
-								/// WTF is this here for? -> echo('This article is live, and cannot be edited except by an editor.');
-								$this->_showarticle($article_id);
-							}
-							break;
-						case 'suggestion':
-							$this->_editSuggestion($article_id,$data);
-							break;
-					}
-
-				} else {
-					redirect('/office/news');
+					// Last update recent so use same revision
+					$this->article_model->updateRevision($revision->id, $article['content_heading'], '', $article['content_subtext'], $article['content_blurb'], $article['content_wikitext'], $cache);
 				}
 			} else {
-				redirect('/office/news');
-			}
-		}
-	}
-
-
-	/**
-	 *	@brief View/Edit suggestions
-	 */
-	function _editSuggestion ($article_id, $data)
-	{
-		/// Get changeable page content
-		$this->pages_model->SetPageCode('office_news_request');
-		/// Get page content
-		$data['boxes'] = $this->requests_model->getBoxes();
-		/// @TODO: this needs to get reporters only part of the article type yorker sub-team
-		$data['reporters'] = $this->requests_model->getReporters();
-		$data['tasks_heading'] = $this->pages_model->GetPropertyText('news_office:tasks_heading', TRUE);
-		$data['status'] = 'suggestion';
-
-		/// Get different content based on access
-		if ($data['user_level'] == 'editor') {
-			$data['heading'] = $this->pages_model->GetPropertyText('heading_editor');
-			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro_editor');
-		} else {
-			$data['heading'] = $this->pages_model->GetPropertyText('heading');
-			$data['intro'] = $this->pages_model->GetPropertyWikitext('intro');
-		}
-
-		/// Determine if current user can edit suggestion details
-		$data['edit_enable'] = false;
-		$data['article'] = $this->requests_model->GetSuggestedArticle($article_id);
-		if (($data['user_level'] == 'editor') || ($data['article']['userid'] == $this->user_auth->entityId)) {
-			$data['edit_enable'] = true;
-		}
-
-		/// Perform validation checks on submitted data
-		$this->load->library('validation');
-		$this->validation->set_error_delimiters('<li>','</li>');
-		/// Validation rules
-		$rules['r_title'] = 'trim|required|xss_clean';
-		$fields['r_title'] = 'title';
-		$rules['r_brief'] = 'trim|required|xss_clean';
-		$fields['r_brief'] = 'brief';
-		$rules['r_box'] = 'trim|required|xss_clean';
-		$fields['r_box'] = 'box';
-		if ($data['user_level'] == 'editor') {
-			$rules['r_deadline'] = 'trim|required|numeric';
-			$fields['r_deadline'] = 'deadline';
-			$rules['r_reporter'] = '';
-			$fields['r_reporter'] = 'reporter';
-		}
-		$this->validation->set_rules($rules);
-		$this->validation->set_fields($fields);
-		/// Run validation checks, if they pass proceed to conduct db integrity checks
-		$errors = array();
-		if ($this->validation->run()) {
-			$deadline = NULL;
-			if ($data['user_level'] == 'editor') {
-				if ($this->input->post('r_deadline') < mktime()) {
-					$errors[] = 'Please select a deadline in the future';
-				} elseif ($this->input->post('r_deadline') > (mktime() + (60*60*24*365))) {
-					$errors[] = 'Please select a deadline within the next year';
-				} else {
-					$deadline = $this->input->post('r_deadline');
-				}
-				if($this->input->post('r_reporter')) {
-					$valid = true;
-					foreach ($this->input->post('r_reporter') as $reporter) {
-						if (!is_numeric($reporter)) {
-							$valid = false;
-						}
-					}
-					if ((!$valid) || (!$this->requests_model->reportersExist($this->input->post('r_reporter')))) {
-						$errors[] = 'Please choose the reporters you wish to assign the request to';
-					}
-				}
-			}
-			if (!$this->requests_model->isBox($this->input->post('r_box'))) {
-				$errors[] = 'Please select the box you wish the suggestion to be submitted to';
-			}
-
-			/// If no db integrity errors then save request
-			if (count($errors) == 0) {
-				if ($deadline != NULL) {
-					$deadline = date('Y-m-d H:i:s', $deadline);
-				}
-				if ($data['user_level'] == 'editor') {
-					if ($this->input->post('accept') == 'Accept') {
-						$accept_data = array(
-							'editor' => $this->user_auth->entityId,
-							'publish_date' => $deadline,
-							'title' => $this->input->post('r_title'),
-							'description' => $this->input->post('r_brief'),
-							'content_type' => $this->input->post('r_box')
-						);
-						$this->requests_model->UpdateRequestStatus($article_id,'request',$accept_data);
-						if($this->input->post('r_reporter')) {
-							foreach ($this->input->post('r_reporter') as $reporter) {
-								$byline = $this->article_model->GetReporterByline($reporter);
-								$this->requests_model->AddUserToRequest($article_id, $reporter, $this->user_auth->entityId, ((isset($byline['id'])) ? $byline['id'] : NULL));
-							}
-						}
-						$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, '', '', '', '', '', '');
-						$this->main_frame->AddMessage('success','Suggestion accepted and request generated.');
-					} else {
-						$this->requests_model->RejectSuggestion($article_id);
-						$this->main_frame->AddMessage('success','Suggestion successfully rejected.');
-					}
-				} else {
-					$this->requests_model->UpdateSuggestion($article_id,array('title' => $this->input->post('r_title'), 'description' => $this->input->post('r_brief'), 'content_type' => $this->input->post('r_box')));
-					$this->main_frame->AddMessage('success','Suggestion details saved.');
-				}
-				redirect('/office/news/' . $article_id);
-			}
-		}
-
-		/// Validation errors occured
-		if ($this->validation->error_string != "") {
-			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $this->validation->error_string . '</ul>');
-		} elseif (count($errors) > 0) {
-			$temp_msg = '';
-			foreach ($errors as $error) {
-				$temp_msg .= '<li>' . $error . '</li>';
-			}
-			$this->main_frame->AddMessage('error','We were unable to process the information you submitted for the following reasons:<ul>' . $temp_msg . '</ul>');
-		} else {
-			/// First time form has been loaded so populate fields
-			$this->validation->r_title = $data['article']['title'];
-			$this->validation->r_brief = $data['article']['description'];
-			$this->validation->r_box = $data['article']['box_codename'];
-			if ($data['status'] == 'request') {
-				$this->validation->r_deadline = $data['article']['deadline'];
-			}
-		}
-
-		/// Set up the main frame
-		$this->main_frame->SetContentSimple('office/news/edit_request', $data);
-		/// Set page title & load main frame with view
-		$this->main_frame->SetTitleParameters(
-			array('action' => 'Edit', 'type' => 'request')
-		);
-
-		/// Load main frame
-		$this->main_frame->AddExtraHead('<link href="/stylesheets/calendar_select.css" rel="stylesheet" type="text/css" />');
-		$this->main_frame->Load();
-	}
-
-
-	/**
-	 *	@brief Publish an article either setting a date for it to go live or adding it to the article pool
-	 */
-	function _publishArticle($article_id)
-	{
-		// Make it so we only have to worry about two levels of access as admins can do everything editors can
-		$data['user_level'] = GetUserLevel();
-		if ($data['user_level'] == 'admin') {
-			$data['user_level'] = 'editor';
-		}
-		$data['article'] = $this->article_model->GetArticleDetails($article_id);
-		if (count($data['article']) == 0) {
-			$this->main_frame->AddMessage('error','The article you requested to publish does not exist, please try again.');
-			redirect('/office/news/');
-		} elseif ($data['user_level'] != 'editor') {
-			$this->main_frame->AddMessage('error','Only editors may publish articles.');
-			redirect('/office/news/' . $article_id);
-		} else {
-			/// Get revision to publish
-			/// @TODO: Allow specifying of revision to publish
-			$revision_id = $this->article_model->GetLatestRevision($article_id);
-			$data['revision_data'] = $this->article_model->GetRevisionData($revision_id);
-
-			$errors = array();
-			if ($data['revision_data']['headline'] == '') {
-				$errors[] = 'Headline not specified.';
-			}
-			if ($data['revision_data']['blurb'] == '') {
-				$errors[] = 'Blurb not specified.';
-			}
-			$reporter_check = FALSE;
-			foreach ($data['article']['reporters'] as $reporter) {
-				if ($reporter['status'] == 'accepted') {
-					$reporter['bcard'] = $this->article_model->GetReporterByline($reporter['id']);
-					if (count($reporter['bcard']) > 0) {
-						$reporter_check = TRUE;
-					} else {
-						$reporter_check = FALSE;
-						break;
-					}
-				}
-			}
-			if (!$reporter_check) {
-				$errors[] = 'At least one reporter must be assigned and have accepted to write this article. All reporters must have a business card also.';
-			}
-			$photo_requests = $this->photos_model->GetPhotoRequestsForArticle($article_id);
-			$photo_all_completed = TRUE;
-			$photo_thumbnail = FALSE;
-			foreach ($photo_requests as $photo) {
-				if (($photo['status'] != 'completed') && ($photo['status'] != 'deleted')) {
-					$photo_all_completed = FALSE;
-				} elseif (($photo['status'] == 'completed') && ($photo['photo_number'] == $data['article']['photo_thumbnail'])) {
-					$photo_thumbnail = TRUE;
-				}
-			}
-			if ($data['article']['photo_thumbnail'] === NULL) {
-				$errors[] = 'Photo to use for article thumbnails not selected.';
-			}
-			if (!$photo_all_completed) {
-				$errors[] = 'All photo requests must have either been completed or cancelled.';
-			}
-			if (!$photo_thumbnail) {
-				$errors[] = 'The photo request that has been set to use for thumbnails must be completed.';
-			}
-			$data['errors'] = $errors;
-
-			/// @TODO: Allow adding to article pool
-			if (($this->input->post('confirm_publish') == 'Publish') && (count($errors) == 0)) {
-				if (!is_numeric($this->input->post('r_publish'))) {
-					$this->main_frame->AddMessage('error','Please select a date and time to publish the article.');
-//				} elseif ($this->input->post('r_publish') < mktime()) {
-//					$this->main_frame->AddMessage('error','Please select a publish date in the future.');
-				} elseif ($this->input->post('r_publish') > (mktime() + (60*60*24*365))) {
-					$this->main_frame->AddMessage('error','Please select a publish date within the next year.');
-				} else {
-					$publish_date = date('Y-m-d H:i:s', $this->input->post('r_publish'));
-					$this->requests_model->PublishArticle($article_id,$revision_id,$publish_date);
-					$this->load->library('facebook_ticker');
-					if ($this->facebook_ticker->TickerUpdate()) {
-						$this->main_frame->AddMessage('success','The Yorker Facebook News Ticker Application was successfully updated.');
-					} else {
-						$this->main_frame->AddMessage('error','There was a problem updating The Yorker Facebook News Ticker Application.');
-					}
-					$this->main_frame->AddMessage('success','The article was successfully published.');
-					redirect('/office/news');
-				}
-			}
-
-			// Get page content
-			$this->pages_model->SetPageCode('office_news_publish');
-			$data['heading'] = $this->pages_model->GetPropertyText('heading');
-			$data['intro_text'] = $this->pages_model->GetPropertyWikitext('intro_text');
-
-			// Set up the main frame
-			$this->main_frame->SetContentSimple('office/news/publish', $data);
-			$this->main_frame->AddExtraHead('<link href="/stylesheets/calendar_select.css" rel="stylesheet" type="text/css" />');
-			// Set page title & load main frame with view
-			$this->main_frame->SetTitleParameters(
-				array('title' => $data['article']['request_title'])
-			);
-			$this->main_frame->Load();
-		}
-	}
-
-
-
-
-
-
-
-
-
-	function _showarticle($article_id = 0)
-	{
-		$this->load->library('image');
-		$data['article'] = $this->article_model->GetArticleDetails($article_id);
-
-		if (count($data['article']) > 0) {
-			// Get photo requests for article
-			$data['photo_requests'] = $this->photos_model->GetPhotoRequestsForArticle($article_id);
-			// Is user requested for this article? i.e. can edit
-			$data['user_requested'] = $this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId);
-			// Show or hide accept/decline request buttons
-			$data['user_requested'] = ($data['user_requested'] == 'requested');
-
-			// Make it so we only have to worry about two levels of access as admins can do everything editors can
-			$data['user_level'] = GetUserLevel();
-			if ($data['user_level'] == 'admin') {
-				$data['user_level'] = 'editor';
-			}
-
-			if ($data['user_requested']) {
-				if ($this->input->post('accept') == 'Accept Request') {
-					$this->requests_model->AcceptRequest($article_id, $this->user_auth->entityId);
-					$this->main_frame->AddMessage('success','Article request accepted.');
-					redirect('/office/news/' . $article_id);
-				} elseif ($this->input->post('decline') == 'Decline Request') {
-					$this->requests_model->DeclineRequest($article_id, $this->user_auth->entityId);
-					$this->main_frame->AddMessage('success','Article request declined.');
-					redirect('/office/news/' . $article_id);
-				}
-			 }
-
-			// Setup XAJAX functions
-			$this->load->library('xajax');
-	        $this->xajax->registerFunction(array('_addComment', &$this, '_addComment'));
-	        $this->xajax->registerFunction(array('_updateHeadlines', &$this, '_updateHeadlines'));
-	        $this->xajax->registerFunction(array('_newFactbox', &$this, '_newFactbox'));
-	        $this->xajax->registerFunction(array('_removeFactBox', &$this, '_removeFactBox'));
-	        $this->xajax->registerFunction(array('_newPhoto', &$this, '_newPhoto'));
-	        $this->xajax->registerFunction(array('_updatePhoto', &$this, '_updatePhoto'));
-	        $this->xajax->registerFunction(array('_deleteArticle', &$this, '_deleteArticle'));
-	        $this->xajax->registerFunction(array('_getMediaFiles', &$this, '_getMediaFiles'));
-	        $this->xajax->processRequests();
-
-			// Create menu
-			$navbar = $this->main_frame->GetNavbar();
-			$navbar->AddItem('request', 'request', 'javascript:tabs(\'request\');');
-			$navbar->AddItem('article', 'body', 'javascript:tabs(\'article\');');
-			//$navbar->AddItem('sidebar', 'sidebar', 'javascript:tabs(\'sidebar\');');
-			$navbar->AddItem('comments', 'comments', 'javascript:tabs(\'comments\');');
-			$navbar->AddItem('revisions', 'revisions', 'javascript:tabs(\'revisions\');');
-			$navbar->SetSelected('request');
-
-			// Get page content
-			$this->pages_model->SetPageCode('office_news_article');
-			$data['request_heading'] = $this->pages_model->GetPropertyText('request_heading');
-
-			/// @todo jh559,cdt502 ajaxify comments
-			$this->load->library('comment_views');
-			$thread = $this->news_model->GetPrivateThread($article_id);
-			$this->comment_views->SetUri('/office/news/'.$article_id.'/');
-			/// @todo jh559,cdt502 comment pages (page hardwired to 1 atm)
-			$data['comments'] = $this->comment_views->CreateStandard($thread, /* included comment */ 0);
-
-			$data['revisions'] = $this->requests_model->GetArticleRevisions($article_id);
-			$revision = $this->article_model->GetLatestRevision($article_id);
-			if (!$revision) {
-				// There is no revision for this article yet... so create one
-				$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, '', '', '', '', '', '');
-			}
-			// Get latest revision's data
-			$data['revision'] = $this->article_model->GetRevisionData($revision);
-
-			// Set up the main frame
-			$this->main_frame->SetContentSimple('office/news/article', $data);
-			$this->main_frame->SetExtraHead($this->xajax->getJavascript(null, '/javascript/xajax.js'));
-			$this->main_frame->IncludeJs('javascript/wikitoolbar.js');
-			// Set page title & load main frame with view
-			$this->main_frame->SetTitleParameters(
-				array('title' => $data['article']['request_title'])
-			);
-			$this->main_frame->Load();
-		}
-	}
-
-	function preview()
-	{
-		if (!CheckPermissions('office')) return;
-
-		$_SESSION['office_news_preview'] = $this->uri->segment(6);
-		redirect('/news/' . $this->uri->segment(5) . '/' . $this->uri->segment(4));
-	}
-
-
-
-	function _deleteArticle()
-	{
-		$xajax_response = new xajaxResponse();
+				// Last update was a while ago, create a new revision
+				$this->article_model->newRevision($article['id'], $this->user_auth->entityId, $article['content_heading'], $article['content_subtext'], $article['content_wikitext'], $cache, $article['content_blurb']);
+			}
+		}
+		$data['article'] = $this->article_model->getById($article_id);
+
+		$xajax_response->addScriptCall('savedChanges');
+		return $xajax_response;
+	}
+
+	function _reporterChange ($user_id = NULL, $op = 'add')
+	{
 		$article_id = $this->uri->segment(3);
-		$data['article'] = $this->article_model->GetArticleDetails($article_id);
-
-		// Make it so we only have to worry about two levels of access as admins can do everything editors can
-		$data['user_level'] = GetUserLevel();
-		if ($data['user_level'] == 'admin') {
-			$data['user_level'] = 'editor';
-		}
-//		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
-		if ($data['user_level'] == 'editor') {
-			$this->requests_model->DeleteArticle($article_id);
-			$this->main_frame->AddMessage('success','The article was successfully deleted.');
-			$xajax_response->addRedirect('/office/news');
-		} else {
-			$xajax_response->addAlert('You must be an editor to delete an article!');
-		}
-		return $xajax_response;
-	}
-
+		$data = array();
+		$xajax_response = new xajaxResponse();
+
+		if (!$this->permissions_model->hasUserPermission('ARTICLE_MODIFY')) {
+			$xajax_response->addScriptCall('errorPermission', 'ARTICLE_MODIFY');
+			return $xajax_response;
+		}
+
+		if (!empty($article_id) && !empty($user_id)) {
+			if ($op == 'add') {
+				$this->article_model->addReporter($article_id, $user_id, $this->user_auth->entityId);
+			} elseif ($op == 'remove') {
+				$this->article_model->removeReporter($article_id, $user_id);
+			}
+		}
+
+		$reporters = $this->article_model->getReportersForArticle($article_id);
+		$xajax_response->addScriptCall('callbackReporters', $reporters);
+		return $xajax_response;
+	}
 
 	function _getMediaFiles()
@@ -1024,8 +271,75 @@
 	}
 
-
-	function _newPhoto($title,$description)
-	{
-		$this->load->library('image');
+	function create ()
+	{
+		if (!CheckPermissions('office')) return;
+		if (!CheckRolePermissions('ARTICLE_ADD')) return;
+	}
+
+
+
+
+
+
+
+
+
+
+	function create2()
+	{
+		$data['boxes'] = $this->requests_model->getBoxes();
+		$data['user_level'] = 'editor';
+		$data['status'] = 'article';
+
+		$article_id = $this->requests_model->CreateRequest('request',$this->input->post('r_box'),$this->input->post('r_title'),$this->input->post('r_brief'),$this->user_auth->entityId,$deadline);
+		$byline = $this->article_model->GetReporterByline($this->user_auth->entityId);
+		$this->requests_model->AddUserToRequest($article_id, $this->user_auth->entityId, $this->user_auth->entityId, ((isset($byline['id'])) ? $byline['id'] : NULL));
+		$this->requests_model->AcceptRequest($article_id, $this->user_auth->entityId);
+		$accept_data = array(
+			'editor' 		=>	$this->user_auth->entityId,
+			'publish_date' 	=>	$deadline,
+			'title'			=>	$this->input->post('r_title'),
+			'description'	=>	$this->input->post('r_brief'),
+			'content_type'	=>	$this->input->post('r_box')
+		);
+		$this->requests_model->UpdateRequestStatus($article_id,'request',$accept_data);
+		$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, '', '', '', '', '', '');
+	}
+
+
+	function _showarticle($article_id = 0)
+	{
+        $this->xajax->registerFunction(array('_deleteArticle', &$this, '_deleteArticle'));
+
+		/// @todo jh559,cdt502 ajaxify comments
+		$this->load->library('comment_views');
+		$thread = $this->news_model->GetPrivateThread($article_id);
+		$this->comment_views->SetUri('/office/news/'.$article_id.'/');
+		/// @todo jh559,cdt502 comment pages (page hardwired to 1 atm)
+		$data['comments'] = $this->comment_views->CreateStandard($thread, /* included comment */ 0);
+
+		$data['revisions'] = $this->requests_model->GetArticleRevisions($article_id);
+		$revision = $this->article_model->GetLatestRevision($article_id);
+		if (!$revision) {
+			// There is no revision for this article yet... so create one
+			$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, '', '', '', '', '', '');
+		}
+		// Get latest revision's data
+		$data['revision'] = $this->article_model->GetRevisionData($revision);
+
+	}
+
+	function preview()
+	{
+		if (!CheckPermissions('office')) return;
+
+		$_SESSION['office_news_preview'] = $this->uri->segment(6);
+		redirect('/news/' . $this->uri->segment(5) . '/' . $this->uri->segment(4));
+	}
+
+
+
+	function _deleteArticle()
+	{
 		$xajax_response = new xajaxResponse();
 		$article_id = $this->uri->segment(3);
@@ -1037,154 +351,11 @@
 			$data['user_level'] = 'editor';
 		}
-		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
-			$this->photos_model->AddNewPhotoRequest($this->user_auth->entityId,$article_id,$title,$description);
-
-			$photo_requests = $this->photos_model->GetPhotoRequestsForArticle($article_id);
-			foreach ($photo_requests as $photo) {
-				$main = 0;
-				$thumb = 0;
-				if ($data['article']['photo_main'] == $photo['photo_number']) {
-					$main = 1;
-				}
-				if ($data['article']['photo_thumbnail'] == $photo['photo_number']) {
-					$thumb = 1;
-				}
-				$xajax_response->addScriptCall('photo_created','/photos/small/'.$photo['chosen_photo'],$photo['id'],$photo['title'],date('d/m/y H:i', $photo['time']),$photo['photo_number'],$main,$thumb);
-			}
-		} else {
-			$xajax_response->addAlert('You do not have the permissions required to add a photo request for this article!');
-		}
-		return $xajax_response;
-	}
-
-	function _updatePhoto($photo_number,$image_operation)
-	{
-		$this->load->library('image');
-		$xajax_response = new xajaxResponse();
-		$article_id = $this->uri->segment(3);
-		$data['article'] = $this->article_model->GetArticleDetails($article_id);
-
-		// Make it so we only have to worry about two levels of access as admins can do everything editors can
-		$data['user_level'] = GetUserLevel();
-		if ($data['user_level'] == 'admin') {
-			$data['user_level'] = 'editor';
-		}
-		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
-			if ($image_operation == 'main') {
-				$this->photos_model->SetArticleMainPhoto($article_id,$photo_number);
-				$data['article']['photo_main'] = $photo_number;
-			} elseif ($image_operation == 'thumbnail') {
-				$this->photos_model->SetArticleThumbnailPhoto($article_id,$photo_number);
-				$data['article']['photo_thumbnail'] = $photo_number;
-			}
-
-			$photo_requests = $this->photos_model->GetPhotoRequestsForArticle($article_id);
-			foreach ($photo_requests as $photo) {
-				$main = 0;
-				$thumb = 0;
-				if ($data['article']['photo_main'] == $photo['photo_number']) {
-					$main = 1;
-				}
-				if ($data['article']['photo_thumbnail'] == $photo['photo_number']) {
-					$thumb = 1;
-				}
-				$xajax_response->addScriptCall('photo_created','/photos/small/'.$photo['chosen_photo'],$photo['id'],$photo['title'],date('d/m/y H:i', $photo['time']),$photo['photo_number'],$main,$thumb);
-			}
-		} else {
-			$xajax_response->addAlert('You do not have the permissions required to edit photo requests for this article!');
-		}
-		return $xajax_response;
-	}
-
-	function _newFactbox($revision,$title,$text)
-	{
-		$xajax_response = new xajaxResponse();
-		$article_id = $this->uri->segment(3);
-		// Make it so we only have to worry about two levels of access as admins can do everything editors can
-		$data['user_level'] = GetUserLevel();
-		if ($data['user_level'] == 'admin') {
-			$data['user_level'] = 'editor';
-		}
-		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
-			if (is_numeric($revision)) {
-				$title = addslashes($this->input->xss_clean($title));
-				$text = addslashes($this->input->xss_clean($text));
-				if ($revision == 0) {
-					$xajax_response->addScriptCall('factbox_created',0);
-				} else {
-					$fact_box_id = $this->article_model->InsertFactBox($revision, $title, $text);
-					$xajax_response->addScriptCall('factbox_created',1);
-				}
-			 } else {
-				$xajax_response->addAlert('Invalid revision number, please try reloading the page.');
-			 }
-		} else {
-			$xajax_response->addAlert('You do not have the permissions required to edit the details for this article!');
-		}
-		return $xajax_response;
-	}
-
-	function _removeFactBox($revision)
-	{
-		$xajax_response = new xajaxResponse();
-		// Make it so we only have to worry about two levels of access as admins can do everything editors can
-		$data['user_level'] = GetUserLevel();
-		if ($data['user_level'] == 'admin') {
-			$data['user_level'] = 'editor';
-		}
-		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
-			if (is_numeric($revision)) {
-				$this->article_model->DeleteRevisionFactBox($revision);
-				$xajax_response->addScriptCall('factbox_deleted');
-			 } else {
-				$xajax_response->addAlert('Invalid revision number, please try reloading the page.');
-			 }
-		} else {
-			$xajax_response->addAlert('You do not have the permissions required to edit the details for this article!');
-		}
-		return $xajax_response;
-	}
-
-	function _updateHeadlines($revision,$headline,$subheadline,$subtext,$blurb,$wiki,$create_cache,$fact_heading,$fact_text)
-	{
-		$this->load->library('image');
-		$xajax_response = new xajaxResponse();
-		$article_id = $this->uri->segment(3);
-		// Make it so we only have to worry about two levels of access as admins can do everything editors can
-		$data['user_level'] = GetUserLevel();
-		if ($data['user_level'] == 'admin') {
-			$data['user_level'] = 'editor';
-		}
-		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
-			if (is_numeric($revision)) {
-				$headline = $this->input->xss_clean($headline);
-				$subheadline = $this->input->xss_clean($subheadline);
-				$subtext = $this->input->xss_clean($subtext);
-				$blurb = $this->input->xss_clean($blurb);
-				$wiki = $this->input->xss_clean($wiki);
-				$fact_heading = $this->input->xss_clean($fact_heading);
-				$fact_text = $this->input->xss_clean($fact_text);
-				$revision = $this->article_model->GetArticleRevisionToEdit($article_id, $this->user_auth->entityId, $revision);
-				$wiki_cache = '';
-//				if ($create_cache) {
-					$this->load->library('wikiparser');
-					$data['photo_requests'] = $this->photos_model->GetPhotoRequestsForArticle($article_id);
-					foreach ($data['photo_requests'] as $photo) {
-						$this->wikiparser->add_image_override($photo['photo_number'], $this->image->getThumb($photo['chosen_photo'], 'medium', true), $photo['title']);
-					}
-					$wiki_cache = $this->wikiparser->parse($wiki);
-//				}
-				if ($revision == 0) {
-					$revision = $this->article_model->CreateNewRevision($article_id, $this->user_auth->entityId, $headline, $subheadline, $subtext, $blurb, $wiki, $wiki_cache);
-				} else {
-					$this->article_model->UpdateRevision($revision,$headline,$subheadline,$subtext,$blurb,$wiki,$wiki_cache);
-				}
-				$this->article_model->UpdateRevisionFactBox($revision, $fact_heading, $fact_text);
-				$xajax_response->addScriptCall('headlinesUpdates',$revision,date('H:i:s'));
-			 } else {
-				$xajax_response->addAlert('Invalid revision number, please try reloading the page.');
-			 }
-		} else {
-			$xajax_response->addAlert('You do not have the permissions required to edit the details for this article!');
+//		if (($data['user_level'] == 'editor') || ($this->requests_model->IsUserRequestedForArticle($article_id, $this->user_auth->entityId) == 'accepted')) {
+		if ($data['user_level'] == 'editor') {
+			$this->requests_model->DeleteArticle($article_id);
+			$this->main_frame->AddMessage('success','The article was successfully deleted.');
+			$xajax_response->addRedirect('/office/news');
+		} else {
+			$xajax_response->addAlert('You must be an editor to delete an article!');
 		}
 		return $xajax_response;
Index: system/application/controllers/office/gallery.php
===================================================================
--- system/application/controllers/office/gallery.php (revision 3c1ffea144254bfe9a9bf8d83d3fea37d75c0a13)
+++ system/application/controllers/office/gallery.php (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -7,5 +7,5 @@
  */
 
-define('PHOTOS_PERPAGE', 66);
+define('PHOTOS_PERPAGE', 72);
 define('VIEW_WIDTH', 600);
 
Index: system/application/models/article_model.php
===================================================================
--- system/application/models/article_model.php (revision d632b05df9693655807d0646c18519a707b62454)
+++ system/application/models/article_model.php (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -131,4 +131,31 @@
 	}
 
+	function update ($id, $type_id, $request_title, $request_description, $thumbnail_photo_id, $main_photo_id, $deadline, $editor_user_id) {
+		$sql = 'UPDATE		articles
+				SET			article_content_type_id = ?,
+							article_request_title = ?,
+							article_request_description = ?,
+							article_thumbnail_photo_id = ?,
+							article_main_photo_id = ?,
+							article_deadline_date = ?,
+							article_editor_approved_user_entity_id = ?
+				WHERE		article_id = ?';
+		$query = $this->db->query($sql, array($type_id, $request_title, $request_description, $thumbnail_photo_id, $main_photo_id, $deadline, $editor_user_id, $id));
+	}
+
+	function publish ($article_id, $revision_id, $publish_date)
+	{
+		$sql = 'UPDATE		articles
+				SET			article_publish_date = ?,
+							article_live_content_id = ?
+				WHERE		article_id = ?';
+		$query = $this->db->query($sql, array($publish_date, $revision_id, $article_id));
+
+		/// Create new comment thread
+		$this->load->model('comments_model');
+		$CI = &get_instance();
+		$CI->comments_model->CreateThread(array('comment_thread_allow_anonymous_comments' => FALSE), 'articles', array('article_id' => $article_id), 'article_public_comment_thread_id');
+	}
+
 	function getAllContentTypes ()
 	{
@@ -143,4 +170,127 @@
 		$query = $this->db->query($sql);
 		return $query->result_array();
+	}
+
+	function getBylinesForUser ($user_id)
+	{
+		$sql = 'SELECT		business_cards.business_card_id AS byline_id,
+							business_cards.business_card_user_entity_id AS user_id,
+							business_cards.business_card_image_id AS image_id,
+							business_cards.business_card_name AS name,
+							business_cards.business_card_title AS title,
+							business_cards.business_card_blurb AS blurb,
+							business_cards.business_card_course AS course,
+							business_cards.business_card_email AS email,
+							business_cards.business_card_mobile AS mobile,
+							business_cards.business_card_phone_internal AS phone_internal,
+							business_cards.business_card_phone_external AS phone_external,
+							business_cards.business_card_postal_address AS address,
+							business_cards.business_card_deleted AS deleted,
+							business_cards.business_card_about_us AS about_us,
+							business_card_groups.business_card_group_name AS group_name
+				FROM		business_cards,
+							business_card_groups
+				WHERE	(	business_cards.business_card_user_entity_id = ?
+						OR	business_cards.business_card_user_entity_id IS NULL
+						)
+				AND			business_cards.business_card_business_card_group_id = business_card_groups.business_card_group_id
+				AND			business_card_groups.business_card_group_organisation_entity_id IS NULL
+				ORDER BY	business_cards.business_card_user_entity_id DESC';
+		$query = $this->db->query($sql, array($user_id));
+		return $query->result_array();
+	}
+
+	function getReportersForArticle ($article_id)
+	{
+		$result = array();
+		$sql = 'SELECT		article_writers.article_writer_user_entity_id AS user_id,
+							CONCAT(users.user_firstname, " ", users.user_surname) AS user_name,
+							article_writers.article_writer_byline_business_card_id AS byline_id,
+							users.user_default_byline_business_card_id AS default_byline_id,
+							article_writers.article_writer_status AS status
+				FROM		article_writers,
+							users
+				WHERE		article_writers.article_writer_article_id = ?
+				AND			article_writers.article_writer_user_entity_id = users.user_entity_id';
+		$query = $this->db->query($sql, array($article_id));
+		if ($query->num_rows() > 0) {
+			foreach ($query->result_array() as $reporter) {
+				$reporter['bylines'] = $this->getBylinesForUser($reporter['user_id']);
+				$result[] = $reporter;
+			}
+		}
+		return $result;
+	}
+
+	function addReporter ($article_id, $user_id, $editor_id)
+	{
+		$sql = 'INSERT INTO	article_writers
+				SET			article_writer_user_entity_id = ?,
+							article_writer_byline_business_card_id = (
+							SELECT user_default_byline_business_card_id FROM users WHERE user_entity_id = ?
+							),
+							article_writer_status = ?,
+							article_writer_editor_accepted_user_entity_id = ?,
+							article_writer_article_id = ?';
+		$query = $this->db->query($sql, array($user_id, $user_id, 'accepted', $editor_id, $article_id));
+	}
+
+	function removeReporter ($article_id, $user_id)
+	{
+		$sql = 'DELETE FROM	article_writers
+				WHERE		article_writer_user_entity_id = ?
+				AND			article_writer_article_id = ?';
+		$query = $this->db->query($sql, array($user_id, $article_id));
+	}
+
+	function changeByline ($article_id, $user_id, $byline_id)
+	{
+		$sql = 'UPDATE		article_writers
+				SET			article_writer_byline_business_card_id = ?
+				WHERE		article_writer_user_entity_id = ?
+				AND			article_writer_article_id = ?';
+		$query = $this->db->query($sql, array($byline_id, $user_id, $article_id));
+	}
+
+	function getLastRevisionMeta ($article_id)
+	{
+		$sql = 'SELECT		article_contents.article_content_id AS id,
+							article_contents.article_content_article_id AS article_id,
+							article_contents.article_content_last_author_user_entity_id AS user_id,
+							CONCAT(users.user_firstname, " ", users.user_surname) AS user_name,
+							UNIX_TIMESTAMP(article_contents.article_content_last_author_timestamp) AS last_update
+				FROM		article_contents,
+							users
+				WHERE		article_contents.article_content_article_id = ?
+				AND			article_contents.article_content_last_author_user_entity_id = users.user_entity_id
+				ORDER BY	article_contents.article_content_last_author_timestamp DESC
+				LIMIT		0,1';
+		$query = $this->db->query($sql, array($article_id));
+		return $query->row();
+	}
+
+	function newRevision ($article_id, $user_id, $heading, $intro, $body, $cache, $blurb) {
+		$sql = 'INSERT INTO	article_contents
+				SET			article_content_article_id = ?,
+							article_content_last_author_user_entity_id = ?,
+							article_content_heading = ?,
+							article_content_subtext = ?,
+							article_content_wikitext = ?,
+							article_content_wikitext_cache = ?,
+							article_content_blurb = ?';
+		$query = $this->db->query($sql, array($article_id, $user_id, $heading, $intro, $body, $cache, $blurb));
+		return $this->db->insert_id();
+	}
+
+	function updateRevision ($id, $heading, $sub_heading, $intro, $blurb, $body, $cache)
+	{
+		$sql = 'UPDATE		article_contents
+				SET			article_content_heading = ?,
+							article_content_subtext = ?,
+							article_content_wikitext = ?,
+							article_content_wikitext_cache = ?,
+							article_content_blurb = ?
+				WHERE		article_content_id = ?';
+		$query = $this->db->query($sql, array($heading, $intro, $body, $cache, $blurb, $id));
 	}
 
@@ -312,20 +462,4 @@
 		}
 	}
-
-	function UpdateRevision ($revision,$headline,$subheadline,$subtext,$blurb,$wiki,$wiki_cache)
-	{
-		$sql = 'UPDATE article_contents
-				SET article_content_heading = ?,
-				 article_content_subheading = ?,
-				 article_content_subtext = ?,
-				 article_content_blurb = ?,
-				 article_content_wikitext = ?,
-				 article_content_wikitext_cache = ?
-				WHERE article_content_id = ?';
-		$query = $this->db->query($sql, array($headline,$subheadline,$subtext,$blurb,$wiki,$wiki_cache,$revision));
-	}
-
-
-
 
 
Index: system/application/models/news_model.php
===================================================================
--- system/application/models/news_model.php (revision bffabc9723c87d18a7716acdc3a31be3b8497abb)
+++ system/application/models/news_model.php (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -58,5 +58,5 @@
 			articles.article_id as article_id,
 			articles.article_publish_date as publish_date,
-			DATE(articles.article_publish_date) <= CURRENT_DATE() as is_live,
+			UNIX_TIMESTAMP(articles.article_publish_date) <= UNIX_TIMESTAMP() as is_live,
 			article_contents.article_content_heading as headline,
 			article_contents.article_content_last_author_timestamp as updated_date,
Index: system/application/models/photos_model.php
===================================================================
--- system/application/models/photos_model.php (revision d632b05df9693655807d0646c18519a707b62454)
+++ system/application/models/photos_model.php (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -394,13 +394,16 @@
 	function GetPhotoRequestsForArticle($article_id)
 	{
-		$sql = 'SELECT		photo_request_id AS request_id,
-							photo_request_relative_photo_number AS photo_number,
-							photo_request_chosen_photo_id AS photo_id,
-							photo_request_image_type_id AS photo_type,
-							photo_request_title AS photo_caption,
-							photo_request_description AS photo_alt
-				FROM		photo_requests
-				WHERE		photo_request_article_id = ?
-				ORDER BY	photo_request_relative_photo_number ASC';
+		$sql = 'SELECT		pr.photo_request_id AS request_id,
+							pr.photo_request_relative_photo_number AS photo_number,
+							pr.photo_request_chosen_photo_id AS photo_id,
+							pr.photo_request_image_type_id AS photo_type,
+							it.image_type_codename AS photo_codename,
+							pr.photo_request_title AS photo_caption,
+							pr.photo_request_description AS photo_alt
+				FROM		photo_requests AS pr,
+							image_types AS it
+				WHERE		pr.photo_request_article_id = ?
+				AND			pr.photo_request_image_type_id = it.image_type_id
+				ORDER BY	pr.photo_request_relative_photo_number ASC';
 		$query = $this->db->query($sql, array($article_id));
 		return $query->result_array();
@@ -554,11 +557,12 @@
 	}
 
-	function ChangeDetails($request_id,$title,$description)
+	function ChangeDetails($request_id,$title,$description,$size = 2)
 	{
 		$sql = 'UPDATE photo_requests
 				SET photo_requests.photo_request_title = ?,
-					photo_requests.photo_request_description = ?
+					photo_requests.photo_request_description = ?,
+					photo_requests.photo_request_image_type_id = ?
 				WHERE photo_requests.photo_request_id = ?';
-		$query = $this->db->query($sql,array($title,$description,$request_id));
+		$query = $this->db->query($sql,array($title,$description,$size,$request_id));
 	}
 
Index: system/application/models/tags_model.php
===================================================================
--- system/application/models/tags_model.php (revision 2939086c27f11c35242a6f00bc77f6ba5e90f2bd)
+++ system/application/models/tags_model.php (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -15,4 +15,74 @@
 		parent::Model();
 	}
+
+	function getArticleTags ($article_id)
+	{
+		$result = array();
+		$sql = 'SELECT		tags.tag_id AS id,
+							tags.tag_name AS name
+				FROM		article_tags,
+							tags
+				WHERE		article_tags.article_tag_article_id = ?
+				AND			article_tags.article_tag_tag_id = tags.tag_id
+				ORDER BY	tags.tag_order ASC';
+		$query = $this->db->query($sql, array($article_id));
+		if ($query->num_rows() > 0) {
+			foreach ($query->result_array() as $row) {
+				$result[$row['id']] = $row['name'];
+			}
+		}
+		return $result;
+	}
+
+	function getPossibleArticleTags ($content_type_id)
+	{
+		$result = array();
+		$sql = 'SELECT		tags.tag_id AS id,
+							tags.tag_name AS name,
+							tag_groups.tag_group_name AS group_name
+				FROM		tags,
+							tag_groups
+				WHERE		tags.tag_type = "grouped"
+				AND			tags.tag_tag_group_id = tag_groups.tag_group_id
+				AND		(	tag_groups.tag_group_content_type_id IS NULL
+						OR	tag_groups.tag_group_content_type_id = ?
+						)
+				ORDER BY	tag_groups.tag_group_order ASC,
+							tags.tag_order ASC';
+		$query = $this->db->query($sql, array($content_type_id));
+		if ($query->num_rows() > 0) {
+			foreach ($query->result_array() as $row) {
+				$result[$row['group_name']][] = $row;
+			}
+		}
+		return $result;
+	}
+
+	function resetArticleTags ($article_id)
+	{
+		$sql = 'DELETE FROM article_tags WHERE article_tag_article_id = ?';
+		$query = $this->db->query($sql, array($article_id));
+	}
+
+	function addArticleTags ($article_id, $tag_ids)
+	{
+		if (!is_array($tag_ids)) {
+			$tag_ids = array($tag_ids);
+		}
+
+		$sql = 'INSERT INTO article_tags
+				SET			article_tag_article_id = ?,
+							article_tag_tag_id = ?';
+
+		foreach ($tag_ids as $tag) {
+			$this->db->query($sql, array($article_id, $tag));
+		}
+	}
+
+
+
+
+
+
 	///////////Tags
 	//Checking tags
@@ -94,5 +164,5 @@
 		$query = $this->db->query($sql,array($name, $type, $group_id, $id));
 	}
-	
+
 	function DoesOrderPositionExist($id, $order_number)
 	{
@@ -254,5 +324,5 @@
 		$query = $this->db->query($sql,array($id));
 		$old_ordered = $query->row()->tag_group_ordered;
-		
+
 		//if group used to be ordered, and wants to remove the ordering,
 		//overwrite the ordering with nulls.
Index: system/application/views/office/article/main.php
===================================================================
--- system/application/views/office/article/main.php (revision d632b05df9693655807d0646c18519a707b62454)
+++ system/application/views/office/article/main.php (revision 91403c7751374d1fbb300bf532a0a3cb93fa330c)
@@ -1,6 +1,10 @@
+<script type='text/javascript' src='/javascript/calendar_select.js'></script>
+<script type='text/javascript' src='/javascript/calendar_select-en.js'></script>
+<script type='text/javascript' src='/javascript/calendar_select-setup.js'></script>
 <script type="text/javascript">
 setStartPage('<?php echo($start_page); ?>');
 setData(<?php echo($articleJS); ?>);
 onLoadFunctions.push(loadPage);
+window.onbeforeunload = leavePage;
 </script>
 
@@ -14,6 +18,15 @@
 			<li id="nav_related"><a href="#" onclick="return switchPage('related');">Related Articles</a></li>
 			<li id="nav_comments"><a href="#" onclick="return switchPage('comments');">Comments</a></li>
+			<li id="nav_revisions"><a href="#" onclick="return switchPage('revisions');">Revisions</a></li>
 			<li id="nav_publish"><a href="#" onclick="return switchPage('publish');">Publish</a></li>
 		</ul>
+
+		<div id="office_sidebar_save">
+			<input type="button" value="Save" onclick="detectChanges();" /><br />
+			<input type="button" value="Preview" onclick="window.location='/news/<?php echo($article['id']); ?>';" />
+		</div>
+		<div id="office_sidebar_wait" class="hide">
+			<img src="/images/version2/office/ajax-loader.gif" alt="Please wait" /> <span id="wait_msg">Saving...</span>
+		</div>
 	</div>
 
@@ -22,10 +35,4 @@
 
 			<div class="office_page" id="page_brief">
-				<div class="actions">
-					<a href="/office/organisation">
-						<img src="/images/version2/office/button_organisation.png" alt="Organisation Chart" />
-					</a>
-				</div>
-
 				<img src="/images/version2/office/icon_announcements.png" alt="Article Brief" class="title" />
 				<h2>Article Brief</h2>
@@ -51,6 +58,11 @@
 				<label for="article_date_deadline_full">Deadline:</label>
 				<div id="article_date_deadline_full" class="input"></div>
-				<div id="article_date_deadline_academic" class="input"></div>
-				<br />
+				<!--<div id="article_date_deadline_academic" class="input"></div>-->
+				<input type="hidden" id="article_date_deadline" value="<?php echo($article['date_deadline']); ?>" />
+				<input type="button" id="deadline_trigger" value="Change" />
+				<br />
+
+				<input type="hidden" id="article_thumbnail_photo_id" value="" />
+				<input type="hidden" id="article_main_photo_id" value="" />
 			</div>
 
@@ -68,4 +80,7 @@
 				<textarea name="article_content_subtext" id="article_content_subtext" rows="4" cols="50"></textarea>
 				<br />
+				<label>&nbsp;</label>
+				<div id="toolbar" class="input"></div>
+				<br />
 				<label for="article_content_wikitext">Body:</label>
 				<textarea name="article_content_wikitext" id="article_content_wikitext" rows="20" cols="50"></textarea>
@@ -74,4 +89,8 @@
 
 			<div class="office_page" id="page_photos">
+				<div class="actions">
+					<input type="button" value="Gallery" onclick="window.location='/office/article/photo/<?php echo($article['id']); ?>';" />
+					<input type="button" value="Upload" onclick="window.location='/office/article/photo/<?php echo($article['id']); ?>/upload';" />
+				</div>
 				<img src="/images/version2/office/icon_article.png" alt="Your Articles" class="title" />
 				<h2>Photos</h2>
@@ -87,14 +106,38 @@
 				<div id="article_creator_name" class="input"></div>
 				<br />
-				<label for="">Editor:</label>
+				<label for="article_editor_name">Editor:</label>
 				<div id="article_editor_name" class="input"></div>
-				<br />
-				<label for="">Reporter:</label>
-				<br />
+				<input type="button" id="changeEditor" value="Change" onclick="changeEditor();" />
+				<select id="article_editor_user_id" class="hide" onchange="changedEditor();">
+					<option value="<?php echo($article['editor_user_id']); ?>"><?php echo($article['editor_name']); ?></option>
+					<?php foreach ($editors as $ed) { ?>
+					<option value="<?php echo($ed['id']); ?>"><?php echo($ed['fullname']); ?></option>
+					<?php } ?>
+				</select>
+				<br />
+
+				<div class="clear"><br /><br /></div>
+
+				<div id="reporter_container"></div>
+				<div id="reporter_prompt">
+					<label>&nbsp;</label>
+					<input type="button" value="Add Reporter" onclick="$('reporter_prompt').className='hide';$('reporter_control').className='show';" />
+				</div>
+				<div id="reporter_control" class="hide">
+					<label for="newReporter">Add Reporter:</label>
+					<select id="newReporter" onchange="addReporter(this);">
+						<option value="-1">-</option>
+						<?php foreach ($all_reporters as $r) { ?>
+						<option value="<?php echo($r['id']); ?>"><?php echo($r['fullname']); ?></option>
+						<?php } ?>
+					</select>
+				</div>
 			</div>
 
 			<div class="office_page" id="page_related">
-				<img src="/images/version2/office/icon_article.png" alt="Related Articles" class="title" />
-				<h2>Related</h2>
+				<div id="custom_tags"></div>
+				<img src="/images/version2/office/icon_article.png" alt="Tags" class="title" />
+				<h2>Tags</h2>
+				<div id="all_tags"></div>
 			</div>
 
@@ -104,22 +147,34 @@
 			</div>
 
+			<div class="office_page" id="page_revisions">
+				<img src="/images/version2/office/icon_article.png" alt="Revisions" class="title" />
+				<h2>Revisions</h2>
+			</div>
+
 			<div class="office_page" id="page_publish">
 				<img src="/images/version2/office/icon_article.png" alt="Publish" class="title" />
-				<h2>Publish</h2>
+				<h2>Article Status</h2>
 
 				<label for="article_status">Status:</label>
 				<div id="article_status" class="input bold heading"></div>
 				<br />
+				<label for="article_hits">Article Views:</label>
+				<div id="article_hits" class="input"></div>
+				<br />
+
+				<div class="clear"></div>
+				<img src="/images/version2/office/icon_article.png" alt="Checklist" class="title" />
+				<h2>Publish</h2>
+
 				<label for="article_date_published_full">Publish Date:</label>
 				<div id="article_date_published_full" class="input"></div>
-				<div id="article_date_published_academic" class="input"></div>
-				<br />
-				<label for="article_hits">Article Views:</label>
-				<div id="article_hits" class="input"></div>
-				<br />
-
-				<div class="clear"></div>
-				<img src="/images/version2/office/icon_article.png" alt="Checklist" class="title" />
-				<h2>Checklist</h2>
+				<!--<div id="article_date_published_academic" class="input"></div>-->
+				<input type="hidden" id="publish" value="<?php echo($article['date_published']); ?>" />
+				<input type="button" id="publish_trigger" value="Change" />
+				<br />
+
+				<label>&nbsp;</label>
+				<input type="button" value="PUBLISH ARTICLE" onclick="publishArticle();" />
+				<br />
 			</div>
 
@@ -129,7 +184,40 @@
 </div>
 
-<pre style="clear:both">
-<?php
-print_r($article);
-?>
-</pre>
+<script type="text/javascript">
+//<![CDATA[
+mwSetupToolbar('toolbar','article_content_wikitext', false);
+
+Calendar.setup(
+	{
+		inputField	: 'publish',
+		ifFormat	: '%s',
+		displayArea	: 'article_date_published_full',
+		daFormat	: '%a %e %b, %Y @ %H:%M',
+		button		: 'publish_trigger',
+		singleClick	: false,
+		firstDay	: 1,
+		date		: <?php echo(js_literalise($article['date_published'])); ?>,
+		weekNumbers	: false,
+		showsTime	: true,
+		timeFormat	: '24'
+	}
+);
+
+Calendar.setup(
+	{
+		inputField	: 'article_date_deadline',
+		ifFormat	: '%s',
+		displayArea	: 'article_date_deadline_full',
+		daFormat	: '%a %e %b, %Y @ %H:%M',
+		button		: 'deadline_trigger',
+		singleClick	: false,
+		firstDay	: 1,
+		date		: <?php echo(js_literalise($article['date_deadline'])); ?>,
+		weekNumbers	: false,
+		showsTime	: true,
+		timeFormat	: '24'
+	}
+);
+
+//]]>
+</script>
